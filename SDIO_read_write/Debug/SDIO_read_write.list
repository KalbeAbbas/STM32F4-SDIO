
SDIO_read_write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007794  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e8c  08007e8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e94  08007e94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e98  08007e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000063c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006ac  200006ac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da97  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002625  00000000  00000000  0002db37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00030160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae0  00000000  00000000  00030d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ae7  00000000  00000000  00031838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff53  00000000  00000000  0005431f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7a38  00000000  00000000  00064272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012bcaa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033c0  00000000  00000000  0012bcfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800790c 	.word	0x0800790c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800790c 	.word	0x0800790c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <Mount_SD+0x38>)
 80005c6:	f005 feb9 	bl	800633c <f_mount>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <Mount_SD+0x3c>)
 80005d0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ((char*)"ERROR!!! in mounting SD CARD...\n\n");
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <Mount_SD+0x3c>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d003      	beq.n	80005e2 <Mount_SD+0x2a>
 80005da:	4807      	ldr	r0, [pc, #28]	; (80005f8 <Mount_SD+0x40>)
 80005dc:	f7ff ffe2 	bl	80005a4 <Send_Uart>
	else Send_Uart((char*)"SD CARD mounted successfully...\n");
}
 80005e0:	e002      	b.n	80005e8 <Mount_SD+0x30>
	else Send_Uart((char*)"SD CARD mounted successfully...\n");
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <Mount_SD+0x44>)
 80005e4:	f7ff ffde 	bl	80005a4 <Send_Uart>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000008c 	.word	0x2000008c
 80005f4:	20000504 	.word	0x20000504
 80005f8:	08007924 	.word	0x08007924
 80005fc:	08007948 	.word	0x08007948

08000600 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000608:	2201      	movs	r2, #1
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	2000      	movs	r0, #0
 800060e:	f005 fe95 	bl	800633c <f_mount>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <Unmount_SD+0x38>)
 8000618:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <Unmount_SD+0x38>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d103      	bne.n	800062a <Unmount_SD+0x2a>
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <Unmount_SD+0x3c>)
 8000624:	f7ff ffbe 	bl	80005a4 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000628:	e002      	b.n	8000630 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <Unmount_SD+0x40>)
 800062c:	f7ff ffba 	bl	80005a4 <Send_Uart>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000504 	.word	0x20000504
 800063c:	0800796c 	.word	0x0800796c
 8000640:	08007994 	.word	0x08007994

08000644 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08e      	sub	sp, #56	; 0x38
 8000648:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 800064a:	2014      	movs	r0, #20
 800064c:	f006 fcd8 	bl	8007000 <malloc>
 8000650:	4603      	mov	r3, r0
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <Format_SD+0xb4>)
 8000656:	4929      	ldr	r1, [pc, #164]	; (80006fc <Format_SD+0xb8>)
 8000658:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800065a:	f006 fdd9 	bl	8007210 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000662:	4618      	mov	r0, r3
 8000664:	f006 fa8b 	bl	8006b7e <f_opendir>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <Format_SD+0xbc>)
 800066e:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <Format_SD+0xbc>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d136      	bne.n	80006e6 <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4922      	ldr	r1, [pc, #136]	; (8000704 <Format_SD+0xc0>)
 800067c:	4618      	mov	r0, r3
 800067e:	f006 fb17 	bl	8006cb0 <f_readdir>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <Format_SD+0xbc>)
 8000688:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <Format_SD+0xbc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d125      	bne.n	80006de <Format_SD+0x9a>
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <Format_SD+0xc0>)
 8000694:	7a5b      	ldrb	r3, [r3, #9]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d021      	beq.n	80006de <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <Format_SD+0xc0>)
 800069c:	7a1b      	ldrb	r3, [r3, #8]
 800069e:	f003 0310 	and.w	r3, r3, #16
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d011      	beq.n	80006ca <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80006a6:	4918      	ldr	r1, [pc, #96]	; (8000708 <Format_SD+0xc4>)
 80006a8:	4818      	ldr	r0, [pc, #96]	; (800070c <Format_SD+0xc8>)
 80006aa:	f7ff fd91 	bl	80001d0 <strcmp>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d012      	beq.n	80006da <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 80006b4:	4814      	ldr	r0, [pc, #80]	; (8000708 <Format_SD+0xc4>)
 80006b6:	f006 fb71 	bl	8006d9c <f_unlink>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <Format_SD+0xbc>)
 80006c0:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <Format_SD+0xbc>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b07      	cmp	r3, #7
 80006c8:	e7d6      	b.n	8000678 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80006ca:	480f      	ldr	r0, [pc, #60]	; (8000708 <Format_SD+0xc4>)
 80006cc:	f006 fb66 	bl	8006d9c <f_unlink>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <Format_SD+0xbc>)
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	e7ce      	b.n	8000678 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80006da:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80006dc:	e7cc      	b.n	8000678 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f006 fabf 	bl	8006c64 <f_closedir>
    }
    free(path);
 80006e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80006e8:	f006 fc92 	bl	8007010 <free>
    return fresult;
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <Format_SD+0xbc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3738      	adds	r7, #56	; 0x38
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	080079e8 	.word	0x080079e8
 80006fc:	080079b8 	.word	0x080079b8
 8000700:	20000504 	.word	0x20000504
 8000704:	200004ec 	.word	0x200004ec
 8000708:	200004f5 	.word	0x200004f5
 800070c:	080079bc 	.word	0x080079bc

08000710 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000718:	4943      	ldr	r1, [pc, #268]	; (8000828 <Create_File+0x118>)
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f006 fb05 	bl	8006d2a <f_stat>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b41      	ldr	r3, [pc, #260]	; (800082c <Create_File+0x11c>)
 8000726:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000728:	4b40      	ldr	r3, [pc, #256]	; (800082c <Create_File+0x11c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d112      	bne.n	8000756 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000730:	2064      	movs	r0, #100	; 0x64
 8000732:	f006 fc65 	bl	8007000 <malloc>
 8000736:	4603      	mov	r3, r0
 8000738:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	493c      	ldr	r1, [pc, #240]	; (8000830 <Create_File+0x120>)
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f006 fd66 	bl	8007210 <siprintf>
		Send_Uart(buf);
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff ff2d 	bl	80005a4 <Send_Uart>
		free(buf);
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f006 fc60 	bl	8007010 <free>
	    return fresult;
 8000750:	4b36      	ldr	r3, [pc, #216]	; (800082c <Create_File+0x11c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	e063      	b.n	800081e <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000756:	220b      	movs	r2, #11
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	4836      	ldr	r0, [pc, #216]	; (8000834 <Create_File+0x124>)
 800075c:	f005 fe34 	bl	80063c8 <f_open>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	4b31      	ldr	r3, [pc, #196]	; (800082c <Create_File+0x11c>)
 8000766:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000768:	4b30      	ldr	r3, [pc, #192]	; (800082c <Create_File+0x11c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d015      	beq.n	800079c <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000770:	2064      	movs	r0, #100	; 0x64
 8000772:	f006 fc45 	bl	8007000 <malloc>
 8000776:	4603      	mov	r3, r0
 8000778:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <Create_File+0x11c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	492d      	ldr	r1, [pc, #180]	; (8000838 <Create_File+0x128>)
 8000784:	6938      	ldr	r0, [r7, #16]
 8000786:	f006 fd43 	bl	8007210 <siprintf>
			Send_Uart(buf);
 800078a:	6938      	ldr	r0, [r7, #16]
 800078c:	f7ff ff0a 	bl	80005a4 <Send_Uart>
			free(buf);
 8000790:	6938      	ldr	r0, [r7, #16]
 8000792:	f006 fc3d 	bl	8007010 <free>
		    return fresult;
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <Create_File+0x11c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	e040      	b.n	800081e <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800079c:	2064      	movs	r0, #100	; 0x64
 800079e:	f006 fc2f 	bl	8007000 <malloc>
 80007a2:	4603      	mov	r3, r0
 80007a4:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4924      	ldr	r1, [pc, #144]	; (800083c <Create_File+0x12c>)
 80007aa:	69f8      	ldr	r0, [r7, #28]
 80007ac:	f006 fd30 	bl	8007210 <siprintf>
			Send_Uart(buf);
 80007b0:	69f8      	ldr	r0, [r7, #28]
 80007b2:	f7ff fef7 	bl	80005a4 <Send_Uart>
			free(buf);
 80007b6:	69f8      	ldr	r0, [r7, #28]
 80007b8:	f006 fc2a 	bl	8007010 <free>
		}

		fresult = f_close(&fil);
 80007bc:	481d      	ldr	r0, [pc, #116]	; (8000834 <Create_File+0x124>)
 80007be:	f006 f9b4 	bl	8006b2a <f_close>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <Create_File+0x11c>)
 80007c8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <Create_File+0x11c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d013      	beq.n	80007fa <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 80007d2:	2064      	movs	r0, #100	; 0x64
 80007d4:	f006 fc14 	bl	8007000 <malloc>
 80007d8:	4603      	mov	r3, r0
 80007da:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <Create_File+0x11c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4916      	ldr	r1, [pc, #88]	; (8000840 <Create_File+0x130>)
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f006 fd12 	bl	8007210 <siprintf>
			Send_Uart(buf);
 80007ec:	6978      	ldr	r0, [r7, #20]
 80007ee:	f7ff fed9 	bl	80005a4 <Send_Uart>
			free(buf);
 80007f2:	6978      	ldr	r0, [r7, #20]
 80007f4:	f006 fc0c 	bl	8007010 <free>
 80007f8:	e00f      	b.n	800081a <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f006 fc00 	bl	8007000 <malloc>
 8000800:	4603      	mov	r3, r0
 8000802:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	490f      	ldr	r1, [pc, #60]	; (8000844 <Create_File+0x134>)
 8000808:	69b8      	ldr	r0, [r7, #24]
 800080a:	f006 fd01 	bl	8007210 <siprintf>
			Send_Uart(buf);
 800080e:	69b8      	ldr	r0, [r7, #24]
 8000810:	f7ff fec8 	bl	80005a4 <Send_Uart>
			free(buf);
 8000814:	69b8      	ldr	r0, [r7, #24]
 8000816:	f006 fbfb 	bl	8007010 <free>
		}
	}
    return fresult;
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <Create_File+0x11c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200004ec 	.word	0x200004ec
 800082c:	20000504 	.word	0x20000504
 8000830:	08007b64 	.word	0x08007b64
 8000834:	200002bc 	.word	0x200002bc
 8000838:	08007b9c 	.word	0x08007b9c
 800083c:	08007bc4 	.word	0x08007bc4
 8000840:	08007c04 	.word	0x08007c04
 8000844:	08007b44 	.word	0x08007b44

08000848 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000852:	4956      	ldr	r1, [pc, #344]	; (80009ac <Update_File+0x164>)
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f006 fa68 	bl	8006d2a <f_stat>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	4b54      	ldr	r3, [pc, #336]	; (80009b0 <Update_File+0x168>)
 8000860:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000862:	4b53      	ldr	r3, [pc, #332]	; (80009b0 <Update_File+0x168>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d012      	beq.n	8000890 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f006 fbc8 	bl	8007000 <malloc>
 8000870:	4603      	mov	r3, r0
 8000872:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	494f      	ldr	r1, [pc, #316]	; (80009b4 <Update_File+0x16c>)
 8000878:	68b8      	ldr	r0, [r7, #8]
 800087a:	f006 fcc9 	bl	8007210 <siprintf>
		Send_Uart (buf);
 800087e:	68b8      	ldr	r0, [r7, #8]
 8000880:	f7ff fe90 	bl	80005a4 <Send_Uart>
		free(buf);
 8000884:	68b8      	ldr	r0, [r7, #8]
 8000886:	f006 fbc3 	bl	8007010 <free>
	    return fresult;
 800088a:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <Update_File+0x168>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	e088      	b.n	80009a2 <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8000890:	2232      	movs	r2, #50	; 0x32
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	4848      	ldr	r0, [pc, #288]	; (80009b8 <Update_File+0x170>)
 8000896:	f005 fd97 	bl	80063c8 <f_open>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <Update_File+0x168>)
 80008a0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008a2:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <Update_File+0x168>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d015      	beq.n	80008d6 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80008aa:	2064      	movs	r0, #100	; 0x64
 80008ac:	f006 fba8 	bl	8007000 <malloc>
 80008b0:	4603      	mov	r3, r0
 80008b2:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80008b4:	4b3e      	ldr	r3, [pc, #248]	; (80009b0 <Update_File+0x168>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	493f      	ldr	r1, [pc, #252]	; (80009bc <Update_File+0x174>)
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f006 fca6 	bl	8007210 <siprintf>
	    	Send_Uart(buf);
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fe6d 	bl	80005a4 <Send_Uart>
	        free(buf);
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f006 fba0 	bl	8007010 <free>
	        return fresult;
 80008d0:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <Update_File+0x168>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	e065      	b.n	80009a2 <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80008d6:	6838      	ldr	r0, [r7, #0]
 80008d8:	f7ff fc84 	bl	80001e4 <strlen>
 80008dc:	4602      	mov	r2, r0
 80008de:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <Update_File+0x178>)
 80008e0:	6839      	ldr	r1, [r7, #0]
 80008e2:	4835      	ldr	r0, [pc, #212]	; (80009b8 <Update_File+0x170>)
 80008e4:	f005 ff2e 	bl	8006744 <f_write>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <Update_File+0x168>)
 80008ee:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008f0:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <Update_File+0x168>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d013      	beq.n	8000920 <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80008f8:	2064      	movs	r0, #100	; 0x64
 80008fa:	f006 fb81 	bl	8007000 <malloc>
 80008fe:	4603      	mov	r3, r0
 8000900:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <Update_File+0x168>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	492e      	ldr	r1, [pc, #184]	; (80009c4 <Update_File+0x17c>)
 800090c:	69b8      	ldr	r0, [r7, #24]
 800090e:	f006 fc7f 	bl	8007210 <siprintf>
	    	Send_Uart(buf);
 8000912:	69b8      	ldr	r0, [r7, #24]
 8000914:	f7ff fe46 	bl	80005a4 <Send_Uart>
	    	free(buf);
 8000918:	69b8      	ldr	r0, [r7, #24]
 800091a:	f006 fb79 	bl	8007010 <free>
 800091e:	e00f      	b.n	8000940 <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000920:	2064      	movs	r0, #100	; 0x64
 8000922:	f006 fb6d 	bl	8007000 <malloc>
 8000926:	4603      	mov	r3, r0
 8000928:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4926      	ldr	r1, [pc, #152]	; (80009c8 <Update_File+0x180>)
 800092e:	69f8      	ldr	r0, [r7, #28]
 8000930:	f006 fc6e 	bl	8007210 <siprintf>
	    	Send_Uart(buf);
 8000934:	69f8      	ldr	r0, [r7, #28]
 8000936:	f7ff fe35 	bl	80005a4 <Send_Uart>
	    	free(buf);
 800093a:	69f8      	ldr	r0, [r7, #28]
 800093c:	f006 fb68 	bl	8007010 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000940:	481d      	ldr	r0, [pc, #116]	; (80009b8 <Update_File+0x170>)
 8000942:	f006 f8f2 	bl	8006b2a <f_close>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <Update_File+0x168>)
 800094c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <Update_File+0x168>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d013      	beq.n	800097e <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000956:	2064      	movs	r0, #100	; 0x64
 8000958:	f006 fb52 	bl	8007000 <malloc>
 800095c:	4603      	mov	r3, r0
 800095e:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <Update_File+0x168>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4918      	ldr	r1, [pc, #96]	; (80009cc <Update_File+0x184>)
 800096a:	6938      	ldr	r0, [r7, #16]
 800096c:	f006 fc50 	bl	8007210 <siprintf>
	    	Send_Uart(buf);
 8000970:	6938      	ldr	r0, [r7, #16]
 8000972:	f7ff fe17 	bl	80005a4 <Send_Uart>
	    	free(buf);
 8000976:	6938      	ldr	r0, [r7, #16]
 8000978:	f006 fb4a 	bl	8007010 <free>
 800097c:	e00f      	b.n	800099e <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800097e:	2064      	movs	r0, #100	; 0x64
 8000980:	f006 fb3e 	bl	8007000 <malloc>
 8000984:	4603      	mov	r3, r0
 8000986:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4911      	ldr	r1, [pc, #68]	; (80009d0 <Update_File+0x188>)
 800098c:	6978      	ldr	r0, [r7, #20]
 800098e:	f006 fc3f 	bl	8007210 <siprintf>
	    	Send_Uart(buf);
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff fe06 	bl	80005a4 <Send_Uart>
	    	free(buf);
 8000998:	6978      	ldr	r0, [r7, #20]
 800099a:	f006 fb39 	bl	8007010 <free>
	     }
	}
    return fresult;
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <Update_File+0x168>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3720      	adds	r7, #32
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200004ec 	.word	0x200004ec
 80009b0:	20000504 	.word	0x20000504
 80009b4:	080079ec 	.word	0x080079ec
 80009b8:	200002bc 	.word	0x200002bc
 80009bc:	08007a0c 	.word	0x08007a0c
 80009c0:	20000508 	.word	0x20000508
 80009c4:	08007c28 	.word	0x08007c28
 80009c8:	08007c50 	.word	0x08007c50
 80009cc:	08007b1c 	.word	0x08007b1c
 80009d0:	08007b44 	.word	0x08007b44

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 faf7 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f835 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f000 f8e3 	bl	8000bac <MX_GPIO_Init>
  MX_DMA_Init();
 80009e6:	f000 f8b9 	bl	8000b5c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80009ea:	f000 f897 	bl	8000b1c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80009ee:	f003 fc55 	bl	800429c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	Mount_SD("/");
 80009f2:	4812      	ldr	r0, [pc, #72]	; (8000a3c <main+0x68>)
 80009f4:	f7ff fde0 	bl	80005b8 <Mount_SD>
	Format_SD();
 80009f8:	f7ff fe24 	bl	8000644 <Format_SD>
	Create_File("test1.TXT");
 80009fc:	4810      	ldr	r0, [pc, #64]	; (8000a40 <main+0x6c>)
 80009fe:	f7ff fe87 	bl	8000710 <Create_File>
	Create_File("FILE2.TXT");
 8000a02:	4810      	ldr	r0, [pc, #64]	; (8000a44 <main+0x70>)
 8000a04:	f7ff fe84 	bl	8000710 <Create_File>
	Unmount_SD("/");
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <main+0x68>)
 8000a0a:	f7ff fdf9 	bl	8000600 <Unmount_SD>
  /* USER CODE END 2 */
	Mount_SD("/");
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <main+0x68>)
 8000a10:	f7ff fdd2 	bl	80005b8 <Mount_SD>
	char buffer[] = "Hi how are you\n";
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <main+0x74>)
 8000a16:	463c      	mov	r4, r7
 8000a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Update_File("test1.TXT", buffer);
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <main+0x6c>)
 8000a24:	f7ff ff10 	bl	8000848 <Update_File>
	Update_File("FILE2.TXT", buffer);
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <main+0x70>)
 8000a2e:	f7ff ff0b 	bl	8000848 <Update_File>
	Unmount_SD("/");
 8000a32:	4802      	ldr	r0, [pc, #8]	; (8000a3c <main+0x68>)
 8000a34:	f7ff fde4 	bl	8000600 <Unmount_SD>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <main+0x64>
 8000a3a:	bf00      	nop
 8000a3c:	08007d3c 	.word	0x08007d3c
 8000a40:	08007d40 	.word	0x08007d40
 8000a44:	08007d4c 	.word	0x08007d4c
 8000a48:	08007d58 	.word	0x08007d58

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	; 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	2230      	movs	r2, #48	; 0x30
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f006 fae0 	bl	8007020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <SystemClock_Config+0xc8>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <SystemClock_Config+0xc8>)
 8000a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <SystemClock_Config+0xc8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <SystemClock_Config+0xcc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <SystemClock_Config+0xcc>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <SystemClock_Config+0xcc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000abc:	2310      	movs	r3, #16
 8000abe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ac0:	23c0      	movs	r3, #192	; 0xc0
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 f95d 	bl	8001d90 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000adc:	f000 f88e 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fbc0 	bl	8002280 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b06:	f000 f879 	bl	8000bfc <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b22:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <MX_SDIO_SD_Init+0x3c>)
 8000b24:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <MX_SDIO_SD_Init+0x38>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	2000050c 	.word	0x2000050c
 8000b58:	40012c00 	.word	0x40012c00

08000b5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_DMA_Init+0x4c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <MX_DMA_Init+0x4c>)
 8000b6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_DMA_Init+0x4c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	203b      	movs	r0, #59	; 0x3b
 8000b84:	f000 fb93 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b88:	203b      	movs	r0, #59	; 0x3b
 8000b8a:	f000 fbac 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2045      	movs	r0, #69	; 0x45
 8000b94:	f000 fb8b 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b98:	2045      	movs	r0, #69	; 0x45
 8000b9a:	f000 fba4 	bl	80012e6 <HAL_NVIC_EnableIRQ>

}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_GPIO_Init+0x4c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <MX_GPIO_Init+0x4c>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_GPIO_Init+0x4c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_GPIO_Init+0x4c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <MX_GPIO_Init+0x4c>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_GPIO_Init+0x4c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a70      	ldr	r2, [pc, #448]	; (8000e38 <HAL_SD_MspInit+0x1e0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f040 80da 	bne.w	8000e30 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	4b6e      	ldr	r3, [pc, #440]	; (8000e3c <HAL_SD_MspInit+0x1e4>)
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	4a6d      	ldr	r2, [pc, #436]	; (8000e3c <HAL_SD_MspInit+0x1e4>)
 8000c86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8c:	4b6b      	ldr	r3, [pc, #428]	; (8000e3c <HAL_SD_MspInit+0x1e4>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4b67      	ldr	r3, [pc, #412]	; (8000e3c <HAL_SD_MspInit+0x1e4>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a66      	ldr	r2, [pc, #408]	; (8000e3c <HAL_SD_MspInit+0x1e4>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca8:	4b64      	ldr	r3, [pc, #400]	; (8000e3c <HAL_SD_MspInit+0x1e4>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	4b60      	ldr	r3, [pc, #384]	; (8000e3c <HAL_SD_MspInit+0x1e4>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a5f      	ldr	r2, [pc, #380]	; (8000e3c <HAL_SD_MspInit+0x1e4>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b5d      	ldr	r3, [pc, #372]	; (8000e3c <HAL_SD_MspInit+0x1e4>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4854      	ldr	r0, [pc, #336]	; (8000e40 <HAL_SD_MspInit+0x1e8>)
 8000cee:	f000 feb3 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d04:	230c      	movs	r3, #12
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	484c      	ldr	r0, [pc, #304]	; (8000e40 <HAL_SD_MspInit+0x1e8>)
 8000d10:	f000 fea2 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d14:	2304      	movs	r3, #4
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d24:	230c      	movs	r3, #12
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4845      	ldr	r0, [pc, #276]	; (8000e44 <HAL_SD_MspInit+0x1ec>)
 8000d30:	f000 fe92 	bl	8001a58 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d34:	4b44      	ldr	r3, [pc, #272]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d36:	4a45      	ldr	r2, [pc, #276]	; (8000e4c <HAL_SD_MspInit+0x1f4>)
 8000d38:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d3a:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d40:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d42:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d54:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d56:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d5e:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d64:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d66:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d68:	2220      	movs	r2, #32
 8000d6a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d72:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d74:	2204      	movs	r2, #4
 8000d76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d78:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d7e:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d84:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d86:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000d8e:	482e      	ldr	r0, [pc, #184]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000d90:	f000 fac4 	bl	800131c <HAL_DMA_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000d9a:	f7ff ff2f 	bl	8000bfc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000da2:	641a      	str	r2, [r3, #64]	; 0x40
 8000da4:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <HAL_SD_MspInit+0x1f0>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000dac:	4a29      	ldr	r2, [pc, #164]	; (8000e54 <HAL_SD_MspInit+0x1fc>)
 8000dae:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000db8:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dca:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dda:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000dde:	2220      	movs	r2, #32
 8000de0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000df6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000dfe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e02:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000e04:	4812      	ldr	r0, [pc, #72]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000e06:	f000 fa89 	bl	800131c <HAL_DMA_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000e10:	f7ff fef4 	bl	8000bfc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000e18:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e1a:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_SD_MspInit+0x1f8>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2031      	movs	r0, #49	; 0x31
 8000e26:	f000 fa42 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000e2a:	2031      	movs	r0, #49	; 0x31
 8000e2c:	f000 fa5b 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	; 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	20000590 	.word	0x20000590
 8000e4c:	40026458 	.word	0x40026458
 8000e50:	200005f0 	.word	0x200005f0
 8000e54:	400264a0 	.word	0x400264a0

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f8e4 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <SDIO_IRQHandler+0x10>)
 8000eb2:	f001 fe09 	bl	8002ac8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000050c 	.word	0x2000050c

08000ec0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <DMA2_Stream3_IRQHandler+0x10>)
 8000ec6:	f000 fb51 	bl	800156c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000590 	.word	0x20000590

08000ed4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <DMA2_Stream6_IRQHandler+0x10>)
 8000eda:	f000 fb47 	bl	800156c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200005f0 	.word	0x200005f0

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f006 f848 	bl	8006fac <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20020000 	.word	0x20020000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	20000650 	.word	0x20000650
 8000f50:	200006b0 	.word	0x200006b0

08000f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7e:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f94:	4c0b      	ldr	r4, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa2:	f7ff ffd7 	bl	8000f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f006 f807 	bl	8006fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fd13 	bl	80009d4 <main>
  bx  lr    
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fbc:	08007e9c 	.word	0x08007e9c
  ldr r2, =_sbss
 8000fc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fc4:	200006ac 	.word	0x200006ac

08000fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_Init+0x40>)
 8000fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_Init+0x40>)
 8000fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_Init+0x40>)
 8000fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f94f 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f000 f808 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001000:	f7ff fe02 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023c00 	.word	0x40023c00

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f967 	bl	8001302 <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f92f 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	20000008 	.word	0x20000008
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	20000654 	.word	0x20000654

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000654 	.word	0x20000654

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0b      	blt.n	8001186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <__NVIC_EnableIRQ+0x38>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff29 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff3e 	bl	8001140 <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff8e 	bl	80011ec <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5d 	bl	8001198 <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff31 	bl	800115c <__NVIC_EnableIRQ>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffa2 	bl	8001254 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff feb6 	bl	8001098 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e099      	b.n	800146c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001358:	e00f      	b.n	800137a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800135a:	f7ff fe9d 	bl	8001098 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b05      	cmp	r3, #5
 8001366:	d908      	bls.n	800137a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2220      	movs	r2, #32
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e078      	b.n	800146c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1e8      	bne.n	800135a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_DMA_Init+0x158>)
 8001394:	4013      	ands	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d107      	bne.n	80013e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4313      	orrs	r3, r2
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f023 0307 	bic.w	r3, r3, #7
 80013fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	4313      	orrs	r3, r2
 8001404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	2b04      	cmp	r3, #4
 800140c:	d117      	bne.n	800143e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00e      	beq.n	800143e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fa9d 	bl	8001960 <DMA_CheckFifoParam>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d008      	beq.n	800143e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800143a:	2301      	movs	r3, #1
 800143c:	e016      	b.n	800146c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fa54 	bl	80018f4 <DMA_CalcBaseAndBitshift>
 800144c:	4603      	mov	r3, r0
 800144e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	223f      	movs	r2, #63	; 0x3f
 8001456:	409a      	lsls	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	f010803f 	.word	0xf010803f

08001478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_DMA_Start_IT+0x26>
 800149a:	2302      	movs	r3, #2
 800149c:	e040      	b.n	8001520 <HAL_DMA_Start_IT+0xa8>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d12f      	bne.n	8001512 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2202      	movs	r2, #2
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f9e6 	bl	8001898 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	223f      	movs	r2, #63	; 0x3f
 80014d2:	409a      	lsls	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0216 	orr.w	r2, r2, #22
 80014e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0208 	orr.w	r2, r2, #8
 80014fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e005      	b.n	800151e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800151a:	2302      	movs	r3, #2
 800151c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800151e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d004      	beq.n	8001546 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00c      	b.n	8001560 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2205      	movs	r2, #5
 800154a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0201 	bic.w	r2, r2, #1
 800155c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001578:	4b8e      	ldr	r3, [pc, #568]	; (80017b4 <HAL_DMA_IRQHandler+0x248>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a8e      	ldr	r2, [pc, #568]	; (80017b8 <HAL_DMA_IRQHandler+0x24c>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0a9b      	lsrs	r3, r3, #10
 8001584:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001596:	2208      	movs	r2, #8
 8001598:	409a      	lsls	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01a      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0204 	bic.w	r2, r2, #4
 80015be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c4:	2208      	movs	r2, #8
 80015c6:	409a      	lsls	r2, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	2201      	movs	r2, #1
 80015de:	409a      	lsls	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d012      	beq.n	800160e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	2201      	movs	r2, #1
 80015fc:	409a      	lsls	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001606:	f043 0202 	orr.w	r2, r3, #2
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001612:	2204      	movs	r2, #4
 8001614:	409a      	lsls	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d012      	beq.n	8001644 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00b      	beq.n	8001644 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	2204      	movs	r2, #4
 8001632:	409a      	lsls	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163c:	f043 0204 	orr.w	r2, r3, #4
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001648:	2210      	movs	r2, #16
 800164a:	409a      	lsls	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d043      	beq.n	80016dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d03c      	beq.n	80016dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	2210      	movs	r2, #16
 8001668:	409a      	lsls	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d018      	beq.n	80016ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d108      	bne.n	800169c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	d024      	beq.n	80016dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
 800169a:	e01f      	b.n	80016dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01b      	beq.n	80016dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	4798      	blx	r3
 80016ac:	e016      	b.n	80016dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d107      	bne.n	80016cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0208 	bic.w	r2, r2, #8
 80016ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e0:	2220      	movs	r2, #32
 80016e2:	409a      	lsls	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 808f 	beq.w	800180c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8087 	beq.w	800180c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	2220      	movs	r2, #32
 8001704:	409a      	lsls	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b05      	cmp	r3, #5
 8001714:	d136      	bne.n	8001784 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0216 	bic.w	r2, r2, #22
 8001724:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001734:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <HAL_DMA_IRQHandler+0x1da>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0208 	bic.w	r2, r2, #8
 8001754:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175a:	223f      	movs	r2, #63	; 0x3f
 800175c:	409a      	lsls	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001776:	2b00      	cmp	r3, #0
 8001778:	d07e      	beq.n	8001878 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
        }
        return;
 8001782:	e079      	b.n	8001878 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d01d      	beq.n	80017ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10d      	bne.n	80017bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d031      	beq.n	800180c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
 80017b0:	e02c      	b.n	800180c <HAL_DMA_IRQHandler+0x2a0>
 80017b2:	bf00      	nop
 80017b4:	20000000 	.word	0x20000000
 80017b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d023      	beq.n	800180c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	4798      	blx	r3
 80017cc:	e01e      	b.n	800180c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10f      	bne.n	80017fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0210 	bic.w	r2, r2, #16
 80017ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	2b00      	cmp	r3, #0
 8001812:	d032      	beq.n	800187a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d022      	beq.n	8001866 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2205      	movs	r2, #5
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	3301      	adds	r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	429a      	cmp	r2, r3
 8001842:	d307      	bcc.n	8001854 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_DMA_IRQHandler+0x2cc>
 8001852:	e000      	b.n	8001856 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001854:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
 8001876:	e000      	b.n	800187a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001878:	bf00      	nop
    }
  }
}
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b40      	cmp	r3, #64	; 0x40
 80018c4:	d108      	bne.n	80018d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018d6:	e007      	b.n	80018e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	3b10      	subs	r3, #16
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <DMA_CalcBaseAndBitshift+0x64>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800190e:	4a13      	ldr	r2, [pc, #76]	; (800195c <DMA_CalcBaseAndBitshift+0x68>)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d909      	bls.n	8001936 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	1d1a      	adds	r2, r3, #4
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	659a      	str	r2, [r3, #88]	; 0x58
 8001934:	e007      	b.n	8001946 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800193e:	f023 0303 	bic.w	r3, r3, #3
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	aaaaaaab 	.word	0xaaaaaaab
 800195c:	08007dbc 	.word	0x08007dbc

08001960 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d11f      	bne.n	80019ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d856      	bhi.n	8001a2e <DMA_CheckFifoParam+0xce>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <DMA_CheckFifoParam+0x28>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	08001999 	.word	0x08001999
 800198c:	080019ab 	.word	0x080019ab
 8001990:	08001999 	.word	0x08001999
 8001994:	08001a2f 	.word	0x08001a2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d046      	beq.n	8001a32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a8:	e043      	b.n	8001a32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019b2:	d140      	bne.n	8001a36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b8:	e03d      	b.n	8001a36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019c2:	d121      	bne.n	8001a08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d837      	bhi.n	8001a3a <DMA_CheckFifoParam+0xda>
 80019ca:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <DMA_CheckFifoParam+0x70>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	080019e7 	.word	0x080019e7
 80019d8:	080019e1 	.word	0x080019e1
 80019dc:	080019f9 	.word	0x080019f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
      break;
 80019e4:	e030      	b.n	8001a48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d025      	beq.n	8001a3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f6:	e022      	b.n	8001a3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a00:	d11f      	bne.n	8001a42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a06:	e01c      	b.n	8001a42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d903      	bls.n	8001a16 <DMA_CheckFifoParam+0xb6>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d003      	beq.n	8001a1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a14:	e018      	b.n	8001a48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	73fb      	strb	r3, [r7, #15]
      break;
 8001a1a:	e015      	b.n	8001a48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00e      	beq.n	8001a46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a2c:	e00b      	b.n	8001a46 <DMA_CheckFifoParam+0xe6>
      break;
 8001a2e:	bf00      	nop
 8001a30:	e00a      	b.n	8001a48 <DMA_CheckFifoParam+0xe8>
      break;
 8001a32:	bf00      	nop
 8001a34:	e008      	b.n	8001a48 <DMA_CheckFifoParam+0xe8>
      break;
 8001a36:	bf00      	nop
 8001a38:	e006      	b.n	8001a48 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3a:	bf00      	nop
 8001a3c:	e004      	b.n	8001a48 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3e:	bf00      	nop
 8001a40:	e002      	b.n	8001a48 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a42:	bf00      	nop
 8001a44:	e000      	b.n	8001a48 <DMA_CheckFifoParam+0xe8>
      break;
 8001a46:	bf00      	nop
    }
  } 
  
  return status; 
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e16b      	b.n	8001d4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 815a 	bne.w	8001d46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d005      	beq.n	8001aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d130      	bne.n	8001b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 0201 	and.w	r2, r3, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d017      	beq.n	8001b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d123      	bne.n	8001b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	69b9      	ldr	r1, [r7, #24]
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80b4 	beq.w	8001d46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <HAL_GPIO_Init+0x30c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a5f      	ldr	r2, [pc, #380]	; (8001d64 <HAL_GPIO_Init+0x30c>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <HAL_GPIO_Init+0x30c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfa:	4a5b      	ldr	r2, [pc, #364]	; (8001d68 <HAL_GPIO_Init+0x310>)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_GPIO_Init+0x314>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d02b      	beq.n	8001c7e <HAL_GPIO_Init+0x226>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a51      	ldr	r2, [pc, #324]	; (8001d70 <HAL_GPIO_Init+0x318>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d025      	beq.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01f      	beq.n	8001c76 <HAL_GPIO_Init+0x21e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <HAL_GPIO_Init+0x320>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x21a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_GPIO_Init+0x324>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x216>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4d      	ldr	r2, [pc, #308]	; (8001d80 <HAL_GPIO_Init+0x328>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x212>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <HAL_GPIO_Init+0x32c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4b      	ldr	r2, [pc, #300]	; (8001d88 <HAL_GPIO_Init+0x330>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x20a>
 8001c5e:	2307      	movs	r3, #7
 8001c60:	e00e      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c62:	2308      	movs	r3, #8
 8001c64:	e00c      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c66:	2306      	movs	r3, #6
 8001c68:	e00a      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	e008      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c90:	4935      	ldr	r1, [pc, #212]	; (8001d68 <HAL_GPIO_Init+0x310>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc2:	4a32      	ldr	r2, [pc, #200]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cec:	4a27      	ldr	r2, [pc, #156]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d16:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d40:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	f67f ae90 	bls.w	8001a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40021400 	.word	0x40021400
 8001d84:	40021800 	.word	0x40021800
 8001d88:	40021c00 	.word	0x40021c00
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e267      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d075      	beq.n	8001e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dae:	4b88      	ldr	r3, [pc, #544]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d00c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dba:	4b85      	ldr	r3, [pc, #532]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d112      	bne.n	8001dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd2:	d10b      	bne.n	8001dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	4b7e      	ldr	r3, [pc, #504]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d05b      	beq.n	8001e98 <HAL_RCC_OscConfig+0x108>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d157      	bne.n	8001e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e242      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d106      	bne.n	8001e04 <HAL_RCC_OscConfig+0x74>
 8001df6:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a75      	ldr	r2, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e01d      	b.n	8001e40 <HAL_RCC_OscConfig+0xb0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x98>
 8001e0e:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6f      	ldr	r2, [pc, #444]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b6d      	ldr	r3, [pc, #436]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6c      	ldr	r2, [pc, #432]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0xb0>
 8001e28:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a68      	ldr	r2, [pc, #416]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff f926 	bl	8001098 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff f922 	bl	8001098 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e207      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	4b5b      	ldr	r3, [pc, #364]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0xc0>
 8001e6e:	e014      	b.n	8001e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff f912 	bl	8001098 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e78:	f7ff f90e 	bl	8001098 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e1f3      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0xe8>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d063      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d11c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d116      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x152>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e1c7      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4937      	ldr	r1, [pc, #220]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	e03a      	b.n	8001f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_RCC_OscConfig+0x244>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7ff f8c7 	bl	8001098 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7ff f8c3 	bl	8001098 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e1a8      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4925      	ldr	r1, [pc, #148]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_OscConfig+0x244>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f8a6 	bl	8001098 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f50:	f7ff f8a2 	bl	8001098 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e187      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d036      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d016      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_RCC_OscConfig+0x248>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7ff f886 	bl	8001098 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f90:	f7ff f882 	bl	8001098 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e167      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x200>
 8001fae:	e01b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_OscConfig+0x248>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f86f 	bl	8001098 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	e00e      	b.n	8001fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f86b 	bl	8001098 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d907      	bls.n	8001fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e150      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	42470000 	.word	0x42470000
 8001fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fdc:	4b88      	ldr	r3, [pc, #544]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ea      	bne.n	8001fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8097 	beq.w	8002124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffa:	4b81      	ldr	r3, [pc, #516]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	4b7d      	ldr	r3, [pc, #500]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a7c      	ldr	r2, [pc, #496]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b7a      	ldr	r3, [pc, #488]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002022:	2301      	movs	r3, #1
 8002024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	4b77      	ldr	r3, [pc, #476]	; (8002204 <HAL_RCC_OscConfig+0x474>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d118      	bne.n	8002064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002032:	4b74      	ldr	r3, [pc, #464]	; (8002204 <HAL_RCC_OscConfig+0x474>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a73      	ldr	r2, [pc, #460]	; (8002204 <HAL_RCC_OscConfig+0x474>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203e:	f7ff f82b 	bl	8001098 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002046:	f7ff f827 	bl	8001098 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e10c      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <HAL_RCC_OscConfig+0x474>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x2ea>
 800206c:	4b64      	ldr	r3, [pc, #400]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 800206e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002070:	4a63      	ldr	r2, [pc, #396]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6713      	str	r3, [r2, #112]	; 0x70
 8002078:	e01c      	b.n	80020b4 <HAL_RCC_OscConfig+0x324>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b05      	cmp	r3, #5
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x30c>
 8002082:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a5e      	ldr	r2, [pc, #376]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	4b5c      	ldr	r3, [pc, #368]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	4a5b      	ldr	r2, [pc, #364]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6713      	str	r3, [r2, #112]	; 0x70
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0x324>
 800209c:	4b58      	ldr	r3, [pc, #352]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a57      	ldr	r2, [pc, #348]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
 80020a8:	4b55      	ldr	r3, [pc, #340]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a54      	ldr	r2, [pc, #336]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 0304 	bic.w	r3, r3, #4
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d015      	beq.n	80020e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7fe ffec 	bl	8001098 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7fe ffe8 	bl	8001098 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0cb      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0ee      	beq.n	80020c4 <HAL_RCC_OscConfig+0x334>
 80020e6:	e014      	b.n	8002112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e8:	f7fe ffd6 	bl	8001098 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7fe ffd2 	bl	8001098 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0b5      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002106:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ee      	bne.n	80020f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002118:	4b39      	ldr	r3, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	4a38      	ldr	r2, [pc, #224]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 800211e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002122:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80a1 	beq.w	8002270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800212e:	4b34      	ldr	r3, [pc, #208]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b08      	cmp	r3, #8
 8002138:	d05c      	beq.n	80021f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d141      	bne.n	80021c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe ffa6 	bl	8001098 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe ffa2 	bl	8001098 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e087      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69da      	ldr	r2, [r3, #28]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	3b01      	subs	r3, #1
 8002188:	041b      	lsls	r3, r3, #16
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	491b      	ldr	r1, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe ff7b 	bl	8001098 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe ff77 	bl	8001098 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e05c      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x416>
 80021c4:	e054      	b.n	8002270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe ff64 	bl	8001098 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe ff60 	bl	8001098 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e045      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x444>
 80021f2:	e03d      	b.n	8002270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d107      	bne.n	800220c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e038      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
 8002200:	40023800 	.word	0x40023800
 8002204:	40007000 	.word	0x40007000
 8002208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x4ec>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d028      	beq.n	800226c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d121      	bne.n	800226c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d11a      	bne.n	800226c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800223c:	4013      	ands	r3, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002244:	4293      	cmp	r3, r2
 8002246:	d111      	bne.n	800226c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	085b      	lsrs	r3, r3, #1
 8002254:	3b01      	subs	r3, #1
 8002256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d107      	bne.n	800226c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0cc      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d90c      	bls.n	80022bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a58      	ldr	r2, [pc, #352]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d044      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d119      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d003      	beq.n	800233e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	2b03      	cmp	r3, #3
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e06f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e067      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4934      	ldr	r1, [pc, #208]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002370:	f7fe fe92 	bl	8001098 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7fe fe8e 	bl	8001098 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e04f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d20c      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f821 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490a      	ldr	r1, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fdf2 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00
 800243c:	40023800 	.word	0x40023800
 8002440:	08007dac 	.word	0x08007dac
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002450:	b090      	sub	sp, #64	; 0x40
 8002452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
 8002458:	2300      	movs	r3, #0
 800245a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245c:	2300      	movs	r3, #0
 800245e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002464:	4b59      	ldr	r3, [pc, #356]	; (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d00d      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x40>
 8002470:	2b08      	cmp	r3, #8
 8002472:	f200 80a1 	bhi.w	80025b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x34>
 800247a:	2b04      	cmp	r3, #4
 800247c:	d003      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x3a>
 800247e:	e09b      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002482:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002484:	e09b      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002486:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002488:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800248a:	e098      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800248c:	4b4f      	ldr	r3, [pc, #316]	; (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002496:	4b4d      	ldr	r3, [pc, #308]	; (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d028      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	2200      	movs	r2, #0
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	627a      	str	r2, [r7, #36]	; 0x24
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024b4:	2100      	movs	r1, #0
 80024b6:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024b8:	fb03 f201 	mul.w	r2, r3, r1
 80024bc:	2300      	movs	r3, #0
 80024be:	fb00 f303 	mul.w	r3, r0, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	4a43      	ldr	r2, [pc, #268]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024c6:	fba0 1202 	umull	r1, r2, r0, r2
 80024ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024cc:	460a      	mov	r2, r1
 80024ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80024d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d2:	4413      	add	r3, r2
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d8:	2200      	movs	r2, #0
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	61fa      	str	r2, [r7, #28]
 80024de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024e6:	f7fd fedb 	bl	80002a0 <__aeabi_uldivmod>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4613      	mov	r3, r2
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f2:	e053      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f4:	4b35      	ldr	r3, [pc, #212]	; (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	2200      	movs	r2, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	617a      	str	r2, [r7, #20]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002506:	f04f 0b00 	mov.w	fp, #0
 800250a:	4652      	mov	r2, sl
 800250c:	465b      	mov	r3, fp
 800250e:	f04f 0000 	mov.w	r0, #0
 8002512:	f04f 0100 	mov.w	r1, #0
 8002516:	0159      	lsls	r1, r3, #5
 8002518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800251c:	0150      	lsls	r0, r2, #5
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	ebb2 080a 	subs.w	r8, r2, sl
 8002526:	eb63 090b 	sbc.w	r9, r3, fp
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002536:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800253a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800253e:	ebb2 0408 	subs.w	r4, r2, r8
 8002542:	eb63 0509 	sbc.w	r5, r3, r9
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	00eb      	lsls	r3, r5, #3
 8002550:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002554:	00e2      	lsls	r2, r4, #3
 8002556:	4614      	mov	r4, r2
 8002558:	461d      	mov	r5, r3
 800255a:	eb14 030a 	adds.w	r3, r4, sl
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	eb45 030b 	adc.w	r3, r5, fp
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002572:	4629      	mov	r1, r5
 8002574:	028b      	lsls	r3, r1, #10
 8002576:	4621      	mov	r1, r4
 8002578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800257c:	4621      	mov	r1, r4
 800257e:	028a      	lsls	r2, r1, #10
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002586:	2200      	movs	r2, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	60fa      	str	r2, [r7, #12]
 800258c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002590:	f7fd fe86 	bl	80002a0 <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4613      	mov	r3, r2
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3740      	adds	r7, #64	; 0x40
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	017d7840 	.word	0x017d7840

080025d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e022      	b.n	8002630 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d105      	bne.n	8002602 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7fe fb2b 	bl	8000c58 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f814 	bl	8002638 <HAL_SD_InitCard>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e00a      	b.n	8002630 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b08e      	sub	sp, #56	; 0x38
 800263c:	af04      	add	r7, sp, #16
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002654:	2376      	movs	r3, #118	; 0x76
 8002656:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681d      	ldr	r5, [r3, #0]
 800265c:	466c      	mov	r4, sp
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002670:	4628      	mov	r0, r5
 8002672:	f001 f8e1 	bl	8003838 <SDIO_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800267c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e04f      	b.n	8002728 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_SD_InitCard+0xf8>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f001 f919 	bl	80038ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <HAL_SD_InitCard+0xf8>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800269e:	2002      	movs	r0, #2
 80026a0:	f7fe fd06 	bl	80010b0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 ff6b 	bl	8003580 <SD_PowerON>
 80026aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e02e      	b.n	8002728 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fe8a 	bl	80033e4 <SD_InitCard>
 80026d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e01b      	b.n	8002728 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 f978 	bl	80039ee <SDMMC_CmdBlockLength>
 80026fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00f      	beq.n	8002726 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <HAL_SD_InitCard+0xfc>)
 800270c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bdb0      	pop	{r4, r5, r7, pc}
 8002730:	422580a0 	.word	0x422580a0
 8002734:	004005ff 	.word	0x004005ff

08002738 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08c      	sub	sp, #48	; 0x30
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0c0      	b.n	80028e2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 80b9 	bne.w	80028e0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	441a      	add	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	429a      	cmp	r2, r3
 8002780:	d907      	bls.n	8002792 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0a7      	b.n	80028e2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2203      	movs	r2, #3
 8002796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a4c      	ldr	r2, [pc, #304]	; (80028ec <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80027bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a4b      	ldr	r2, [pc, #300]	; (80028f0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80027c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2200      	movs	r2, #0
 80027cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3380      	adds	r3, #128	; 0x80
 80027fc:	4619      	mov	r1, r3
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	025b      	lsls	r3, r3, #9
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	f7fe fe37 	bl	8001478 <HAL_DMA_Start_IT>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d017      	beq.n	8002840 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800281e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a33      	ldr	r2, [pc, #204]	; (80028f4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e050      	b.n	80028e2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002840:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	2b01      	cmp	r3, #1
 800284c:	d002      	beq.n	8002854 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	025b      	lsls	r3, r3, #9
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
 8002858:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002860:	2390      	movs	r3, #144	; 0x90
 8002862:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002864:	2302      	movs	r3, #2
 8002866:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800286c:	2301      	movs	r3, #1
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f107 0210 	add.w	r2, r7, #16
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f001 f88b 	bl	8003996 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d90a      	bls.n	800289c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2282      	movs	r2, #130	; 0x82
 800288a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002892:	4618      	mov	r0, r3
 8002894:	f001 f8ef 	bl	8003a76 <SDMMC_CmdReadMultiBlock>
 8002898:	62f8      	str	r0, [r7, #44]	; 0x2c
 800289a:	e009      	b.n	80028b0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2281      	movs	r2, #129	; 0x81
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 f8c2 	bl	8003a32 <SDMMC_CmdReadSingleBlock>
 80028ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e002      	b.n	80028e2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3730      	adds	r7, #48	; 0x30
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	080031f3 	.word	0x080031f3
 80028f0:	08003265 	.word	0x08003265
 80028f4:	004005ff 	.word	0x004005ff
 80028f8:	4225858c 	.word	0x4225858c

080028fc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08c      	sub	sp, #48	; 0x30
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d107      	bne.n	8002924 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0c5      	b.n	8002ab0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	f040 80be 	bne.w	8002aae <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	441a      	add	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	429a      	cmp	r2, r3
 8002944:	d907      	bls.n	8002956 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0ac      	b.n	8002ab0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	4a4e      	ldr	r2, [pc, #312]	; (8002ab8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002980:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	4a4d      	ldr	r2, [pc, #308]	; (8002abc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002988:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	2200      	movs	r2, #0
 8002990:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	2b01      	cmp	r3, #1
 8002998:	d002      	beq.n	80029a0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	025b      	lsls	r3, r3, #9
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d90a      	bls.n	80029bc <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	22a0      	movs	r2, #160	; 0xa0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 f8a3 	bl	8003afe <SDMMC_CmdWriteMultiBlock>
 80029b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80029ba:	e009      	b.n	80029d0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2290      	movs	r2, #144	; 0x90
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 f876 	bl	8003aba <SDMMC_CmdWriteSingleBlock>
 80029ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d012      	beq.n	80029fc <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a39      	ldr	r2, [pc, #228]	; (8002ac0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80029dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e059      	b.n	8002ab0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80029fc:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	2240      	movs	r2, #64	; 0x40
 8002a08:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3380      	adds	r3, #128	; 0x80
 8002a32:	461a      	mov	r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	025b      	lsls	r3, r3, #9
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	f7fe fd1d 	bl	8001478 <HAL_DMA_Start_IT>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01c      	beq.n	8002a7e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002a52:	f023 0302 	bic.w	r3, r3, #2
 8002a56:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002a5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e018      	b.n	8002ab0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	025b      	lsls	r3, r3, #9
 8002a88:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a8a:	2390      	movs	r3, #144	; 0x90
 8002a8c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f107 0210 	add.w	r2, r7, #16
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 ff76 	bl	8003996 <SDIO_ConfigData>

      return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3730      	adds	r7, #48	; 0x30
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	080031c9 	.word	0x080031c9
 8002abc:	08003265 	.word	0x08003265
 8002ac0:	004005ff 	.word	0x004005ff
 8002ac4:	4225858c 	.word	0x4225858c

08002ac8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_SD_IRQHandler+0x2e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fdfc 	bl	80036ec <SD_Read_IT>
 8002af4:	e165      	b.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 808f 	beq.w	8002c24 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002b1e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002b22:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d039      	beq.n	8002bb2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d104      	bne.n	8002b52 <HAL_SD_IRQHandler+0x8a>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d011      	beq.n	8002b76 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fff4 	bl	8003b44 <SDMMC_CmdStopTransfer>
 8002b5c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f92f 	bl	8002dd4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f240 523a 	movw	r2, #1338	; 0x53a
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <HAL_SD_IRQHandler+0xda>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f001 fc12 	bl	80043cc <HAL_SD_RxCpltCallback>
 8002ba8:	e10b      	b.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f001 fc04 	bl	80043b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bb0:	e107      	b.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8102 	beq.w	8002dc2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d011      	beq.n	8002bec <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 ffb9 	bl	8003b44 <SDMMC_CmdStopTransfer>
 8002bd2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8f4 	bl	8002dd4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 80e5 	bne.w	8002dc2 <HAL_SD_IRQHandler+0x2fa>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 80df 	bne.w	8002dc2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0208 	bic.w	r2, r2, #8
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f001 fbcb 	bl	80043b8 <HAL_SD_TxCpltCallback>
}
 8002c22:	e0ce      	b.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_SD_IRQHandler+0x17c>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fda6 	bl	800378e <SD_Write_IT>
 8002c42:	e0be      	b.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	f240 233a 	movw	r3, #570	; 0x23a
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80b6 	beq.w	8002dc2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	f043 0202 	orr.w	r2, r3, #2
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	f043 0208 	orr.w	r2, r3, #8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	f043 0208 	orr.w	r2, r3, #8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f240 723a 	movw	r2, #1850	; 0x73a
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002cf0:	f023 0302 	bic.w	r3, r3, #2
 8002cf4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 ff22 	bl	8003b44 <SDMMC_CmdStopTransfer>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f855 	bl	8002dd4 <HAL_SD_ErrorCallback>
}
 8002d2a:	e04a      	b.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d045      	beq.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_SD_IRQHandler+0x282>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d011      	beq.n	8002d6e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	4a1f      	ldr	r2, [pc, #124]	; (8002dcc <HAL_SD_IRQHandler+0x304>)
 8002d50:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fbe6 	bl	8001528 <HAL_DMA_Abort_IT>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d02f      	beq.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 face 	bl	8003308 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002d6c:	e029      	b.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <HAL_SD_IRQHandler+0x2ba>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d011      	beq.n	8002da6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <HAL_SD_IRQHandler+0x308>)
 8002d88:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fbca 	bl	8001528 <HAL_DMA_Abort_IT>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d013      	beq.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fae9 	bl	8003376 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002da4:	e00d      	b.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f001 faf2 	bl	80043a4 <HAL_SD_AbortCallback>
}
 8002dc0:	e7ff      	b.n	8002dc2 <HAL_SD_IRQHandler+0x2fa>
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	08003309 	.word	0x08003309
 8002dd0:	08003377 	.word	0x08003377

08002dd4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df6:	0f9b      	lsrs	r3, r3, #30
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e02:	0e9b      	lsrs	r3, r3, #26
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e14:	0e1b      	lsrs	r3, r3, #24
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e26:	0c1b      	lsrs	r3, r3, #16
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e48:	0d1b      	lsrs	r3, r3, #20
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e66:	0bdb      	lsrs	r3, r3, #15
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e78:	0b9b      	lsrs	r3, r3, #14
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e8a:	0b5b      	lsrs	r3, r3, #13
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e9c:	0b1b      	lsrs	r3, r3, #12
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2200      	movs	r2, #0
 8002eae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d163      	bne.n	8002f80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ebc:	009a      	lsls	r2, r3, #2
 8002ebe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002ec8:	0f92      	lsrs	r2, r2, #30
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed4:	0edb      	lsrs	r3, r3, #27
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee6:	0e1b      	lsrs	r3, r3, #24
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef8:	0d5b      	lsrs	r3, r3, #21
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0a:	0c9b      	lsrs	r3, r3, #18
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1c:	0bdb      	lsrs	r3, r3, #15
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	7e1b      	ldrb	r3, [r3, #24]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	3302      	adds	r3, #2
 8002f40:	2201      	movs	r2, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002f4a:	fb03 f202 	mul.w	r2, r3, r2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	7a1b      	ldrb	r3, [r3, #8]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f6c:	0a52      	lsrs	r2, r2, #9
 8002f6e:	fb03 f202 	mul.w	r2, r3, r2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7c:	661a      	str	r2, [r3, #96]	; 0x60
 8002f7e:	e031      	b.n	8002fe4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d11d      	bne.n	8002fc4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	029a      	lsls	r2, r3, #10
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	661a      	str	r2, [r3, #96]	; 0x60
 8002fc2:	e00f      	b.n	8002fe4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_SD_GetCardCSD+0x344>)
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e09d      	b.n	8003120 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe8:	0b9b      	lsrs	r3, r3, #14
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ffa:	09db      	lsrs	r3, r3, #7
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003002:	b2da      	uxtb	r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003012:	b2da      	uxtb	r2, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301c:	0fdb      	lsrs	r3, r3, #31
 800301e:	b2da      	uxtb	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	0f5b      	lsrs	r3, r3, #29
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	b2da      	uxtb	r2, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	0e9b      	lsrs	r3, r3, #26
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	b2da      	uxtb	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	0d9b      	lsrs	r3, r3, #22
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	b2da      	uxtb	r2, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	0d5b      	lsrs	r3, r3, #21
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	b2da      	uxtb	r2, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	0c1b      	lsrs	r3, r3, #16
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	b2da      	uxtb	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	0bdb      	lsrs	r3, r3, #15
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	b2da      	uxtb	r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	0b9b      	lsrs	r3, r3, #14
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	0b5b      	lsrs	r3, r3, #13
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	0b1b      	lsrs	r3, r3, #12
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	0a9b      	lsrs	r3, r3, #10
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800310e:	b2da      	uxtb	r2, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	004005ff 	.word	0x004005ff

08003130 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003194:	f107 030c 	add.w	r3, r7, #12
 8003198:	4619      	mov	r1, r3
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa7e 	bl	800369c <SD_SendStatus>
 80031a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	0a5b      	lsrs	r3, r3, #9
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80031be:	693b      	ldr	r3, [r7, #16]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	2b82      	cmp	r3, #130	; 0x82
 8003206:	d111      	bne.n	800322c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fc99 	bl	8003b44 <SDMMC_CmdStopTransfer>
 8003212:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	431a      	orrs	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f7ff fdd4 	bl	8002dd4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0208 	bic.w	r2, r2, #8
 800323a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f240 523a 	movw	r2, #1338	; 0x53a
 8003244:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f001 f8b9 	bl	80043cc <HAL_SD_RxCpltCallback>
#endif
}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe fb04 	bl	8001880 <HAL_DMA_GetError>
 8003278:	4603      	mov	r3, r0
 800327a:	2b02      	cmp	r3, #2
 800327c:	d03e      	beq.n	80032fc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d002      	beq.n	800329a <SD_DMAError+0x36>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d12d      	bne.n	80032f6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a19      	ldr	r2, [pc, #100]	; (8003304 <SD_DMAError+0xa0>)
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff ff62 	bl	8003188 <HAL_SD_GetCardState>
 80032c4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d002      	beq.n	80032d2 <SD_DMAError+0x6e>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d10a      	bne.n	80032e8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fc34 	bl	8003b44 <SDMMC_CmdStopTransfer>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	431a      	orrs	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80032f6:	6978      	ldr	r0, [r7, #20]
 80032f8:	f7ff fd6c 	bl	8002dd4 <HAL_SD_ErrorCallback>
#endif
  }
}
 80032fc:	bf00      	nop
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	004005ff 	.word	0x004005ff

08003308 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f240 523a 	movw	r2, #1338	; 0x53a
 800331e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff ff31 	bl	8003188 <HAL_SD_GetCardState>
 8003326:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b06      	cmp	r3, #6
 800333a:	d002      	beq.n	8003342 <SD_DMATxAbort+0x3a>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d10a      	bne.n	8003358 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fbfc 	bl	8003b44 <SDMMC_CmdStopTransfer>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	431a      	orrs	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	2b00      	cmp	r3, #0
 800335e:	d103      	bne.n	8003368 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f001 f81f 	bl	80043a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003366:	e002      	b.n	800336e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7ff fd33 	bl	8002dd4 <HAL_SD_ErrorCallback>
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f240 523a 	movw	r2, #1338	; 0x53a
 800338c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7ff fefa 	bl	8003188 <HAL_SD_GetCardState>
 8003394:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d002      	beq.n	80033b0 <SD_DMARxAbort+0x3a>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d10a      	bne.n	80033c6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fbc5 	bl	8003b44 <SDMMC_CmdStopTransfer>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 ffe8 	bl	80043a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80033d4:	e002      	b.n	80033dc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff fcfc 	bl	8002dd4 <HAL_SD_ErrorCallback>
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80033e4:	b5b0      	push	{r4, r5, r7, lr}
 80033e6:	b094      	sub	sp, #80	; 0x50
 80033e8:	af04      	add	r7, sp, #16
 80033ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80033ec:	2301      	movs	r3, #1
 80033ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fa76 	bl	80038e6 <SDIO_GetPowerState>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003400:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003404:	e0b8      	b.n	8003578 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	2b03      	cmp	r3, #3
 800340c:	d02f      	beq.n	800346e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fc5d 	bl	8003cd2 <SDMMC_CmdSendCID>
 8003418:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800341a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <SD_InitCard+0x40>
    {
      return errorstate;
 8003420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003422:	e0a9      	b.n	8003578 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2100      	movs	r1, #0
 800342a:	4618      	mov	r0, r3
 800342c:	f000 faa0 	bl	8003970 <SDIO_GetResponse>
 8003430:	4602      	mov	r2, r0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2104      	movs	r1, #4
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fa97 	bl	8003970 <SDIO_GetResponse>
 8003442:	4602      	mov	r2, r0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2108      	movs	r1, #8
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fa8e 	bl	8003970 <SDIO_GetResponse>
 8003454:	4602      	mov	r2, r0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	210c      	movs	r1, #12
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fa85 	bl	8003970 <SDIO_GetResponse>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	2b03      	cmp	r3, #3
 8003474:	d00d      	beq.n	8003492 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f107 020e 	add.w	r2, r7, #14
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fc63 	bl	8003d4c <SDMMC_CmdSetRelAdd>
 8003486:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <SD_InitCard+0xae>
    {
      return errorstate;
 800348e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003490:	e072      	b.n	8003578 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	2b03      	cmp	r3, #3
 8003498:	d036      	beq.n	8003508 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800349a:	89fb      	ldrh	r3, [r7, #14]
 800349c:	461a      	mov	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034aa:	041b      	lsls	r3, r3, #16
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f000 fc2d 	bl	8003d0e <SDMMC_CmdSendCSD>
 80034b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80034bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034be:	e05b      	b.n	8003578 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fa52 	bl	8003970 <SDIO_GetResponse>
 80034cc:	4602      	mov	r2, r0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2104      	movs	r1, #4
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fa49 	bl	8003970 <SDIO_GetResponse>
 80034de:	4602      	mov	r2, r0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2108      	movs	r1, #8
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fa40 	bl	8003970 <SDIO_GetResponse>
 80034f0:	4602      	mov	r2, r0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	210c      	movs	r1, #12
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fa37 	bl	8003970 <SDIO_GetResponse>
 8003502:	4602      	mov	r2, r0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2104      	movs	r1, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fa2e 	bl	8003970 <SDIO_GetResponse>
 8003514:	4603      	mov	r3, r0
 8003516:	0d1a      	lsrs	r2, r3, #20
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800351c:	f107 0310 	add.w	r3, r7, #16
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fc60 	bl	8002de8 <HAL_SD_GetCardCSD>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800352e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003532:	e021      	b.n	8003578 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6819      	ldr	r1, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	2200      	movs	r2, #0
 8003540:	461c      	mov	r4, r3
 8003542:	4615      	mov	r5, r2
 8003544:	4622      	mov	r2, r4
 8003546:	462b      	mov	r3, r5
 8003548:	4608      	mov	r0, r1
 800354a:	f000 fb1d 	bl	8003b88 <SDMMC_CmdSelDesel>
 800354e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <SD_InitCard+0x176>
  {
    return errorstate;
 8003556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003558:	e00e      	b.n	8003578 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681d      	ldr	r5, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	466c      	mov	r4, sp
 8003562:	f103 0210 	add.w	r2, r3, #16
 8003566:	ca07      	ldmia	r2, {r0, r1, r2}
 8003568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800356c:	3304      	adds	r3, #4
 800356e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003570:	4628      	mov	r0, r5
 8003572:	f000 f961 	bl	8003838 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3740      	adds	r7, #64	; 0x40
 800357c:	46bd      	mov	sp, r7
 800357e:	bdb0      	pop	{r4, r5, r7, pc}

08003580 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fb18 	bl	8003bce <SDMMC_CmdGoIdleState>
 800359e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <SD_PowerON+0x2a>
  {
    return errorstate;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	e072      	b.n	8003690 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fb2b 	bl	8003c0a <SDMMC_CmdOperCond>
 80035b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00d      	beq.n	80035d8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fb01 	bl	8003bce <SDMMC_CmdGoIdleState>
 80035cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <SD_PowerON+0x5e>
    {
      return errorstate;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	e05b      	b.n	8003690 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d137      	bne.n	8003656 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fb2b 	bl	8003c48 <SDMMC_CmdAppCommand>
 80035f2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02d      	beq.n	8003656 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035fe:	e047      	b.n	8003690 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fb1e 	bl	8003c48 <SDMMC_CmdAppCommand>
 800360c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <SD_PowerON+0x98>
    {
      return errorstate;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	e03b      	b.n	8003690 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	491e      	ldr	r1, [pc, #120]	; (8003698 <SD_PowerON+0x118>)
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fb34 	bl	8003c8c <SDMMC_CmdAppOperCommand>
 8003624:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800362c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003630:	e02e      	b.n	8003690 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f999 	bl	8003970 <SDIO_GetResponse>
 800363e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	0fdb      	lsrs	r3, r3, #31
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <SD_PowerON+0xcc>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <SD_PowerON+0xce>
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]

    count++;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3301      	adds	r3, #1
 8003654:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800365c:	4293      	cmp	r3, r2
 800365e:	d802      	bhi.n	8003666 <SD_PowerON+0xe6>
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0cc      	beq.n	8003600 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800366c:	4293      	cmp	r3, r2
 800366e:	d902      	bls.n	8003676 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003674:	e00c      	b.n	8003690 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
 8003686:	e002      	b.n	800368e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	c1100000 	.word	0xc1100000

0800369c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80036ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036b0:	e018      	b.n	80036e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 fb65 	bl	8003d8e <SDMMC_CmdSendStatus>
 80036c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	e009      	b.n	80036e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f94a 	bl	8003970 <SDIO_GetResponse>
 80036dc:	4602      	mov	r2, r0
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03f      	beq.n	8003786 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e033      	b.n	8003774 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f8bc 	bl	800388e <SDIO_ReadFIFO>
 8003716:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3b01      	subs	r3, #1
 800372a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3301      	adds	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	3b01      	subs	r3, #1
 8003740:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	b2da      	uxtb	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3301      	adds	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3b01      	subs	r3, #1
 8003756:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	0e1b      	lsrs	r3, r3, #24
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3301      	adds	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3b01      	subs	r3, #1
 800376c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3301      	adds	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b07      	cmp	r3, #7
 8003778:	d9c8      	bls.n	800370c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d043      	beq.n	8003830 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e037      	b.n	800381e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	3b01      	subs	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	021a      	lsls	r2, r3, #8
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3301      	adds	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	041a      	lsls	r2, r3, #16
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	061a      	lsls	r2, r3, #24
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3301      	adds	r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	3b01      	subs	r3, #1
 8003806:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f107 0208 	add.w	r2, r7, #8
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f848 	bl	80038a8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	3301      	adds	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b07      	cmp	r3, #7
 8003822:	d9c4      	bls.n	80037ae <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003838:	b084      	sub	sp, #16
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	f107 001c 	add.w	r0, r7, #28
 8003846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800384e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003850:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003852:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003856:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800385a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800385e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003862:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003872:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	b004      	add	sp, #16
 800388c:	4770      	bx	lr

0800388e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2203      	movs	r2, #3
 80038d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0303 	and.w	r3, r3, #3
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003920:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003926:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800392c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800393c:	f023 030f 	bic.w	r3, r3, #15
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	b2db      	uxtb	r3, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3314      	adds	r3, #20
 800397e:	461a      	mov	r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4413      	add	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
}  
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80039bc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80039c2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80039c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0

}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b088      	sub	sp, #32
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80039fc:	2310      	movs	r3, #16
 80039fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a00:	2340      	movs	r3, #64	; 0x40
 8003a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff74 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	2110      	movs	r1, #16
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f9d7 	bl	8003dd4 <SDMMC_GetCmdResp1>
 8003a26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a28:	69fb      	ldr	r3, [r7, #28]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b088      	sub	sp, #32
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003a40:	2311      	movs	r3, #17
 8003a42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a44:	2340      	movs	r3, #64	; 0x40
 8003a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a52:	f107 0308 	add.w	r3, r7, #8
 8003a56:	4619      	mov	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff52 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	2111      	movs	r1, #17
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f9b5 	bl	8003dd4 <SDMMC_GetCmdResp1>
 8003a6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b088      	sub	sp, #32
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003a84:	2312      	movs	r3, #18
 8003a86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a88:	2340      	movs	r3, #64	; 0x40
 8003a8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a96:	f107 0308 	add.w	r3, r7, #8
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff30 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	2112      	movs	r1, #18
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f993 	bl	8003dd4 <SDMMC_GetCmdResp1>
 8003aae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b088      	sub	sp, #32
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003ac8:	2318      	movs	r3, #24
 8003aca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003acc:	2340      	movs	r3, #64	; 0x40
 8003ace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff0e 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	2118      	movs	r1, #24
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f971 	bl	8003dd4 <SDMMC_GetCmdResp1>
 8003af2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003af4:	69fb      	ldr	r3, [r7, #28]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b088      	sub	sp, #32
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003b0c:	2319      	movs	r3, #25
 8003b0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b10:	2340      	movs	r3, #64	; 0x40
 8003b12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b1e:	f107 0308 	add.w	r3, r7, #8
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff feec 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	2119      	movs	r1, #25
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f94f 	bl	8003dd4 <SDMMC_GetCmdResp1>
 8003b36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b38:	69fb      	ldr	r3, [r7, #28]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003b50:	230c      	movs	r3, #12
 8003b52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b54:	2340      	movs	r3, #64	; 0x40
 8003b56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff feca 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003b6e:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <SDMMC_CmdStopTransfer+0x40>)
 8003b70:	210c      	movs	r1, #12
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f92e 	bl	8003dd4 <SDMMC_GetCmdResp1>
 8003b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	05f5e100 	.word	0x05f5e100

08003b88 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003b98:	2307      	movs	r3, #7
 8003b9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b9c:	2340      	movs	r3, #64	; 0x40
 8003b9e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003baa:	f107 0310 	add.w	r3, r7, #16
 8003bae:	4619      	mov	r1, r3
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7ff fea6 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	2107      	movs	r1, #7
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f909 	bl	8003dd4 <SDMMC_GetCmdResp1>
 8003bc2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3728      	adds	r7, #40	; 0x28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b088      	sub	sp, #32
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bec:	f107 0308 	add.w	r3, r7, #8
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fe85 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fb23 	bl	8004244 <SDMMC_GetCmdError>
 8003bfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c00:	69fb      	ldr	r3, [r7, #28]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b088      	sub	sp, #32
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003c12:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003c16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003c18:	2308      	movs	r3, #8
 8003c1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c1c:	2340      	movs	r3, #64	; 0x40
 8003c1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c2a:	f107 0308 	add.w	r3, r7, #8
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fe66 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fab6 	bl	80041a8 <SDMMC_GetCmdResp7>
 8003c3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3720      	adds	r7, #32
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003c56:	2337      	movs	r3, #55	; 0x37
 8003c58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c5a:	2340      	movs	r3, #64	; 0x40
 8003c5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c68:	f107 0308 	add.w	r3, r7, #8
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff fe47 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c78:	2137      	movs	r1, #55	; 0x37
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f8aa 	bl	8003dd4 <SDMMC_GetCmdResp1>
 8003c80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c82:	69fb      	ldr	r3, [r7, #28]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003ca2:	2329      	movs	r3, #41	; 0x29
 8003ca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ca6:	2340      	movs	r3, #64	; 0x40
 8003ca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cb4:	f107 0308 	add.w	r3, r7, #8
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fe21 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f9bd 	bl	8004040 <SDMMC_GetCmdResp3>
 8003cc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b088      	sub	sp, #32
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003ce2:	23c0      	movs	r3, #192	; 0xc0
 8003ce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff fe03 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f957 	bl	8003fb0 <SDMMC_GetCmdResp2>
 8003d02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d04:	69fb      	ldr	r3, [r7, #28]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b088      	sub	sp, #32
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003d1c:	2309      	movs	r3, #9
 8003d1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003d20:	23c0      	movs	r3, #192	; 0xc0
 8003d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d2e:	f107 0308 	add.w	r3, r7, #8
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff fde4 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f938 	bl	8003fb0 <SDMMC_GetCmdResp2>
 8003d40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d42:	69fb      	ldr	r3, [r7, #28]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d5e:	2340      	movs	r3, #64	; 0x40
 8003d60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d6c:	f107 0308 	add.w	r3, r7, #8
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff fdc5 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	2103      	movs	r1, #3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f99d 	bl	80040bc <SDMMC_GetCmdResp6>
 8003d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d84:	69fb      	ldr	r3, [r7, #28]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b088      	sub	sp, #32
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003d9c:	230d      	movs	r3, #13
 8003d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003da0:	2340      	movs	r3, #64	; 0x40
 8003da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff fda4 	bl	8003902 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	210d      	movs	r1, #13
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f807 	bl	8003dd4 <SDMMC_GetCmdResp1>
 8003dc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003de2:	4b70      	ldr	r3, [pc, #448]	; (8003fa4 <SDMMC_GetCmdResp1+0x1d0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a70      	ldr	r2, [pc, #448]	; (8003fa8 <SDMMC_GetCmdResp1+0x1d4>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	0a5a      	lsrs	r2, r3, #9
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	fb02 f303 	mul.w	r3, r2, r3
 8003df4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	1e5a      	subs	r2, r3, #1
 8003dfa:	61fa      	str	r2, [r7, #28]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e04:	e0c9      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0ef      	beq.n	8003df6 <SDMMC_GetCmdResp1+0x22>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ea      	bne.n	8003df6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e32:	2304      	movs	r3, #4
 8003e34:	e0b1      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0a6      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	22c5      	movs	r2, #197	; 0xc5
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff fd7f 	bl	8003956 <SDIO_GetCommandResponse>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	7afb      	ldrb	r3, [r7, #11]
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d001      	beq.n	8003e66 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e099      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003e66:	2100      	movs	r1, #0
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff fd81 	bl	8003970 <SDIO_GetResponse>
 8003e6e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4b4e      	ldr	r3, [pc, #312]	; (8003fac <SDMMC_GetCmdResp1+0x1d8>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e08d      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	da02      	bge.n	8003e8a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e88:	e087      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003e94:	2340      	movs	r3, #64	; 0x40
 8003e96:	e080      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	e079      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eb4:	e071      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ec4:	e069      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed4:	e061      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ee4:	e059      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ef4:	e051      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f04:	e049      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f14:	e041      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f24:	e039      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f34:	e031      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003f40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f44:	e029      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003f50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f54:	e021      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003f60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f64:	e019      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003f70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f74:	e011      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003f80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f84:	e009      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003f90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003f94:	e001      	b.n	8003f9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	10624dd3 	.word	0x10624dd3
 8003fac:	fdffe008 	.word	0xfdffe008

08003fb0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003fb8:	4b1f      	ldr	r3, [pc, #124]	; (8004038 <SDMMC_GetCmdResp2+0x88>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1f      	ldr	r2, [pc, #124]	; (800403c <SDMMC_GetCmdResp2+0x8c>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	0a5b      	lsrs	r3, r3, #9
 8003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc8:	fb02 f303 	mul.w	r3, r2, r3
 8003fcc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1e5a      	subs	r2, r3, #1
 8003fd2:	60fa      	str	r2, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003fd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fdc:	e026      	b.n	800402c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0ef      	beq.n	8003fce <SDMMC_GetCmdResp2+0x1e>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ea      	bne.n	8003fce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d004      	beq.n	800400e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2204      	movs	r2, #4
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800400a:	2304      	movs	r3, #4
 800400c:	e00e      	b.n	800402c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d004      	beq.n	8004024 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004020:	2301      	movs	r3, #1
 8004022:	e003      	b.n	800402c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	22c5      	movs	r2, #197	; 0xc5
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	20000000 	.word	0x20000000
 800403c:	10624dd3 	.word	0x10624dd3

08004040 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <SDMMC_GetCmdResp3+0x74>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1a      	ldr	r2, [pc, #104]	; (80040b8 <SDMMC_GetCmdResp3+0x78>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	0a5b      	lsrs	r3, r3, #9
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1e5a      	subs	r2, r3, #1
 8004062:	60fa      	str	r2, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004068:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800406c:	e01b      	b.n	80040a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ef      	beq.n	800405e <SDMMC_GetCmdResp3+0x1e>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ea      	bne.n	800405e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d004      	beq.n	800409e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2204      	movs	r2, #4
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800409a:	2304      	movs	r3, #4
 800409c:	e003      	b.n	80040a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	22c5      	movs	r2, #197	; 0xc5
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000000 	.word	0x20000000
 80040b8:	10624dd3 	.word	0x10624dd3

080040bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	460b      	mov	r3, r1
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80040ca:	4b35      	ldr	r3, [pc, #212]	; (80041a0 <SDMMC_GetCmdResp6+0xe4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a35      	ldr	r2, [pc, #212]	; (80041a4 <SDMMC_GetCmdResp6+0xe8>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	0a5b      	lsrs	r3, r3, #9
 80040d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	1e5a      	subs	r2, r3, #1
 80040e4:	61fa      	str	r2, [r7, #28]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80040ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040ee:	e052      	b.n	8004196 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ef      	beq.n	80040e0 <SDMMC_GetCmdResp6+0x24>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ea      	bne.n	80040e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2204      	movs	r2, #4
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800411c:	2304      	movs	r3, #4
 800411e:	e03a      	b.n	8004196 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004132:	2301      	movs	r3, #1
 8004134:	e02f      	b.n	8004196 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7ff fc0d 	bl	8003956 <SDIO_GetCommandResponse>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	7afb      	ldrb	r3, [r7, #11]
 8004142:	4293      	cmp	r3, r2
 8004144:	d001      	beq.n	800414a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004146:	2301      	movs	r3, #1
 8004148:	e025      	b.n	8004196 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	22c5      	movs	r2, #197	; 0xc5
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004150:	2100      	movs	r1, #0
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff fc0c 	bl	8003970 <SDIO_GetResponse>
 8004158:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	b29a      	uxth	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800416e:	2300      	movs	r3, #0
 8004170:	e011      	b.n	8004196 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800417c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004180:	e009      	b.n	8004196 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800418c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004190:	e001      	b.n	8004196 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000000 	.word	0x20000000
 80041a4:	10624dd3 	.word	0x10624dd3

080041a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041b0:	4b22      	ldr	r3, [pc, #136]	; (800423c <SDMMC_GetCmdResp7+0x94>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a22      	ldr	r2, [pc, #136]	; (8004240 <SDMMC_GetCmdResp7+0x98>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	0a5b      	lsrs	r3, r3, #9
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1e5a      	subs	r2, r3, #1
 80041ca:	60fa      	str	r2, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041d4:	e02c      	b.n	8004230 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ef      	beq.n	80041c6 <SDMMC_GetCmdResp7+0x1e>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ea      	bne.n	80041c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2204      	movs	r2, #4
 8004200:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004202:	2304      	movs	r3, #4
 8004204:	e014      	b.n	8004230 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004218:	2301      	movs	r3, #1
 800421a:	e009      	b.n	8004230 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2240      	movs	r2, #64	; 0x40
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800422e:	2300      	movs	r3, #0
  
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	20000000 	.word	0x20000000
 8004240:	10624dd3 	.word	0x10624dd3

08004244 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <SDMMC_GetCmdError+0x50>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a11      	ldr	r2, [pc, #68]	; (8004298 <SDMMC_GetCmdError+0x54>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	0a5b      	lsrs	r3, r3, #9
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	fb02 f303 	mul.w	r3, r2, r3
 8004260:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1e5a      	subs	r2, r3, #1
 8004266:	60fa      	str	r2, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800426c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004270:	e009      	b.n	8004286 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f1      	beq.n	8004262 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	22c5      	movs	r2, #197	; 0xc5
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000000 	.word	0x20000000
 8004298:	10624dd3 	.word	0x10624dd3

0800429c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80042a0:	4904      	ldr	r1, [pc, #16]	; (80042b4 <MX_FATFS_Init+0x18>)
 80042a2:	4805      	ldr	r0, [pc, #20]	; (80042b8 <MX_FATFS_Init+0x1c>)
 80042a4:	f002 fe72 	bl	8006f8c <FATFS_LinkDriver>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <MX_FATFS_Init+0x20>)
 80042ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	2000065c 	.word	0x2000065c
 80042b8:	08007dc4 	.word	0x08007dc4
 80042bc:	20000658 	.word	0x20000658

080042c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80042c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80042da:	f000 f888 	bl	80043ee <BSP_SD_IsDetected>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d001      	beq.n	80042e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e005      	b.n	80042f4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80042e8:	4804      	ldr	r0, [pc, #16]	; (80042fc <BSP_SD_Init+0x2c>)
 80042ea:	f7fe f975 	bl	80025d8 <HAL_SD_Init>
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80042f2:	79fb      	ldrb	r3, [r7, #7]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	2000050c 	.word	0x2000050c

08004300 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	4806      	ldr	r0, [pc, #24]	; (8004330 <BSP_SD_ReadBlocks_DMA+0x30>)
 8004318:	f7fe fa0e 	bl	8002738 <HAL_SD_ReadBlocks_DMA>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004326:	7dfb      	ldrb	r3, [r7, #23]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	2000050c 	.word	0x2000050c

08004334 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	68f9      	ldr	r1, [r7, #12]
 800434a:	4806      	ldr	r0, [pc, #24]	; (8004364 <BSP_SD_WriteBlocks_DMA+0x30>)
 800434c:	f7fe fad6 	bl	80028fc <HAL_SD_WriteBlocks_DMA>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800435a:	7dfb      	ldrb	r3, [r7, #23]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	2000050c 	.word	0x2000050c

08004368 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800436c:	4805      	ldr	r0, [pc, #20]	; (8004384 <BSP_SD_GetCardState+0x1c>)
 800436e:	f7fe ff0b 	bl	8003188 <HAL_SD_GetCardState>
 8004372:	4603      	mov	r3, r0
 8004374:	2b04      	cmp	r3, #4
 8004376:	bf14      	ite	ne
 8004378:	2301      	movne	r3, #1
 800437a:	2300      	moveq	r3, #0
 800437c:	b2db      	uxtb	r3, r3
}
 800437e:	4618      	mov	r0, r3
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	2000050c 	.word	0x2000050c

08004388 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4803      	ldr	r0, [pc, #12]	; (80043a0 <BSP_SD_GetCardInfo+0x18>)
 8004394:	f7fe fecc 	bl	8003130 <HAL_SD_GetCardInfo>
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	2000050c 	.word	0x2000050c

080043a4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80043ac:	f000 f818 	bl	80043e0 <BSP_SD_AbortCallback>
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80043c0:	f000 f98c 	bl	80046dc <BSP_SD_WriteCpltCallback>
}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80043d4:	f000 f98e 	bl	80046f4 <BSP_SD_ReadCpltCallback>
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0

}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80043f4:	2301      	movs	r3, #1
 80043f6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	b2db      	uxtb	r3, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004410:	f7fc fe42 	bl	8001098 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8004416:	e006      	b.n	8004426 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004418:	f7ff ffa6 	bl	8004368 <BSP_SD_GetCardState>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004422:	2300      	movs	r3, #0
 8004424:	e009      	b.n	800443a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8004426:	f7fc fe37 	bl	8001098 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d8f0      	bhi.n	8004418 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <SD_CheckStatus+0x38>)
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004454:	f7ff ff88 	bl	8004368 <BSP_SD_GetCardState>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d107      	bne.n	800446e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <SD_CheckStatus+0x38>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4b04      	ldr	r3, [pc, #16]	; (800447c <SD_CheckStatus+0x38>)
 800446c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800446e:	4b03      	ldr	r3, [pc, #12]	; (800447c <SD_CheckStatus+0x38>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	b2db      	uxtb	r3, r3
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000009 	.word	0x20000009

08004480 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800448a:	f7ff ff21 	bl	80042d0 <BSP_SD_Init>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d107      	bne.n	80044a4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff ffd4 	bl	8004444 <SD_CheckStatus>
 800449c:	4603      	mov	r3, r0
 800449e:	461a      	mov	r2, r3
 80044a0:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <SD_initialize+0x34>)
 80044a2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <SD_initialize+0x34>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	b2db      	uxtb	r3, r3
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000009 	.word	0x20000009

080044b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ffbd 	bl	8004444 <SD_CheckStatus>
 80044ca:	4603      	mov	r3, r0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80044e8:	f247 5030 	movw	r0, #30000	; 0x7530
 80044ec:	f7ff ff8c 	bl	8004408 <SD_CheckStatusWithTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da01      	bge.n	80044fa <SD_read+0x26>
  {
    return res;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	e03b      	b.n	8004572 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	68b8      	ldr	r0, [r7, #8]
 8004500:	f7ff fefe 	bl	8004300 <BSP_SD_ReadBlocks_DMA>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d132      	bne.n	8004570 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800450a:	4b1c      	ldr	r3, [pc, #112]	; (800457c <SD_read+0xa8>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004510:	f7fc fdc2 	bl	8001098 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004516:	bf00      	nop
 8004518:	4b18      	ldr	r3, [pc, #96]	; (800457c <SD_read+0xa8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d108      	bne.n	8004532 <SD_read+0x5e>
 8004520:	f7fc fdba 	bl	8001098 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f247 522f 	movw	r2, #29999	; 0x752f
 800452e:	4293      	cmp	r3, r2
 8004530:	d9f2      	bls.n	8004518 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <SD_read+0xa8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
 800453e:	e017      	b.n	8004570 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004540:	4b0e      	ldr	r3, [pc, #56]	; (800457c <SD_read+0xa8>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004546:	f7fc fda7 	bl	8001098 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800454c:	e007      	b.n	800455e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800454e:	f7ff ff0b 	bl	8004368 <BSP_SD_GetCardState>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d102      	bne.n	800455e <SD_read+0x8a>
          {
            res = RES_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800455c:	e008      	b.n	8004570 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800455e:	f7fc fd9b 	bl	8001098 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f247 522f 	movw	r2, #29999	; 0x752f
 800456c:	4293      	cmp	r3, r2
 800456e:	d9ee      	bls.n	800454e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004570:	7dfb      	ldrb	r3, [r7, #23]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000664 	.word	0x20000664

08004580 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4603      	mov	r3, r0
 800458e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004594:	4b24      	ldr	r3, [pc, #144]	; (8004628 <SD_write+0xa8>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800459a:	f247 5030 	movw	r0, #30000	; 0x7530
 800459e:	f7ff ff33 	bl	8004408 <SD_CheckStatusWithTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	da01      	bge.n	80045ac <SD_write+0x2c>
  {
    return res;
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	e038      	b.n	800461e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	68b8      	ldr	r0, [r7, #8]
 80045b2:	f7ff febf 	bl	8004334 <BSP_SD_WriteBlocks_DMA>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d12f      	bne.n	800461c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80045bc:	f7fc fd6c 	bl	8001098 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80045c2:	bf00      	nop
 80045c4:	4b18      	ldr	r3, [pc, #96]	; (8004628 <SD_write+0xa8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d108      	bne.n	80045de <SD_write+0x5e>
 80045cc:	f7fc fd64 	bl	8001098 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f247 522f 	movw	r2, #29999	; 0x752f
 80045da:	4293      	cmp	r3, r2
 80045dc:	d9f2      	bls.n	80045c4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <SD_write+0xa8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <SD_write+0x6c>
      {
        res = RES_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	75fb      	strb	r3, [r7, #23]
 80045ea:	e017      	b.n	800461c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <SD_write+0xa8>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80045f2:	f7fc fd51 	bl	8001098 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80045f8:	e007      	b.n	800460a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80045fa:	f7ff feb5 	bl	8004368 <BSP_SD_GetCardState>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <SD_write+0x8a>
          {
            res = RES_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	75fb      	strb	r3, [r7, #23]
            break;
 8004608:	e008      	b.n	800461c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800460a:	f7fc fd45 	bl	8001098 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	f247 522f 	movw	r2, #29999	; 0x752f
 8004618:	4293      	cmp	r3, r2
 800461a:	d9ee      	bls.n	80045fa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000660 	.word	0x20000660

0800462c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	; 0x30
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	603a      	str	r2, [r7, #0]
 8004636:	71fb      	strb	r3, [r7, #7]
 8004638:	460b      	mov	r3, r1
 800463a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004642:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <SD_ioctl+0xac>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <SD_ioctl+0x28>
 8004650:	2303      	movs	r3, #3
 8004652:	e03c      	b.n	80046ce <SD_ioctl+0xa2>

  switch (cmd)
 8004654:	79bb      	ldrb	r3, [r7, #6]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d834      	bhi.n	80046c4 <SD_ioctl+0x98>
 800465a:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <SD_ioctl+0x34>)
 800465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004660:	08004671 	.word	0x08004671
 8004664:	08004679 	.word	0x08004679
 8004668:	08004691 	.word	0x08004691
 800466c:	080046ab 	.word	0x080046ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004676:	e028      	b.n	80046ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fe83 	bl	8004388 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800468e:	e01c      	b.n	80046ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fe77 	bl	8004388 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	b29a      	uxth	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80046a8:	e00f      	b.n	80046ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80046aa:	f107 030c 	add.w	r3, r7, #12
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fe6a 	bl	8004388 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	0a5a      	lsrs	r2, r3, #9
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80046c2:	e002      	b.n	80046ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80046c4:	2304      	movs	r3, #4
 80046c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80046ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3730      	adds	r7, #48	; 0x30
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000009 	.word	0x20000009

080046dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80046e0:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <BSP_SD_WriteCpltCallback+0x14>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
}
 80046e6:	bf00      	nop
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	20000660 	.word	0x20000660

080046f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <BSP_SD_ReadCpltCallback+0x14>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
}
 80046fe:	bf00      	nop
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	20000664 	.word	0x20000664

0800470c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	4a08      	ldr	r2, [pc, #32]	; (800473c <disk_status+0x30>)
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	79fa      	ldrb	r2, [r7, #7]
 8004724:	4905      	ldr	r1, [pc, #20]	; (800473c <disk_status+0x30>)
 8004726:	440a      	add	r2, r1
 8004728:	7a12      	ldrb	r2, [r2, #8]
 800472a:	4610      	mov	r0, r2
 800472c:	4798      	blx	r3
 800472e:	4603      	mov	r3, r0
 8004730:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000690 	.word	0x20000690

08004740 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	4a0d      	ldr	r2, [pc, #52]	; (8004788 <disk_initialize+0x48>)
 8004752:	5cd3      	ldrb	r3, [r2, r3]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d111      	bne.n	800477c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <disk_initialize+0x48>)
 800475c:	2101      	movs	r1, #1
 800475e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <disk_initialize+0x48>)
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	79fa      	ldrb	r2, [r7, #7]
 800476e:	4906      	ldr	r1, [pc, #24]	; (8004788 <disk_initialize+0x48>)
 8004770:	440a      	add	r2, r1
 8004772:	7a12      	ldrb	r2, [r2, #8]
 8004774:	4610      	mov	r0, r2
 8004776:	4798      	blx	r3
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000690 	.word	0x20000690

0800478c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4603      	mov	r3, r0
 800479a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <disk_read+0x3c>)
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	689c      	ldr	r4, [r3, #8]
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	4a07      	ldr	r2, [pc, #28]	; (80047c8 <disk_read+0x3c>)
 80047ac:	4413      	add	r3, r2
 80047ae:	7a18      	ldrb	r0, [r3, #8]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	47a0      	blx	r4
 80047b8:	4603      	mov	r3, r0
 80047ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd90      	pop	{r4, r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000690 	.word	0x20000690

080047cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4603      	mov	r3, r0
 80047da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <disk_write+0x3c>)
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	68dc      	ldr	r4, [r3, #12]
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	4a07      	ldr	r2, [pc, #28]	; (8004808 <disk_write+0x3c>)
 80047ec:	4413      	add	r3, r2
 80047ee:	7a18      	ldrb	r0, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	47a0      	blx	r4
 80047f8:	4603      	mov	r3, r0
 80047fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	bd90      	pop	{r4, r7, pc}
 8004806:	bf00      	nop
 8004808:	20000690 	.word	0x20000690

0800480c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	603a      	str	r2, [r7, #0]
 8004816:	71fb      	strb	r3, [r7, #7]
 8004818:	460b      	mov	r3, r1
 800481a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	4a09      	ldr	r2, [pc, #36]	; (8004844 <disk_ioctl+0x38>)
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	79fa      	ldrb	r2, [r7, #7]
 800482a:	4906      	ldr	r1, [pc, #24]	; (8004844 <disk_ioctl+0x38>)
 800482c:	440a      	add	r2, r1
 800482e:	7a10      	ldrb	r0, [r2, #8]
 8004830:	79b9      	ldrb	r1, [r7, #6]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4798      	blx	r3
 8004836:	4603      	mov	r3, r0
 8004838:	73fb      	strb	r3, [r7, #15]
  return res;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000690 	.word	0x20000690

08004848 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3301      	adds	r3, #1
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	021b      	lsls	r3, r3, #8
 800485c:	b21a      	sxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	b21b      	sxth	r3, r3
 8004864:	4313      	orrs	r3, r2
 8004866:	b21b      	sxth	r3, r3
 8004868:	81fb      	strh	r3, [r7, #14]
	return rv;
 800486a:	89fb      	ldrh	r3, [r7, #14]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3303      	adds	r3, #3
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	3202      	adds	r2, #2
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	3201      	adds	r2, #1
 800489e:	7812      	ldrb	r2, [r2, #0]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	7812      	ldrb	r2, [r2, #0]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80048b0:	68fb      	ldr	r3, [r7, #12]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	887a      	ldrh	r2, [r7, #2]
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	887b      	ldrh	r3, [r7, #2]
 80048d8:	0a1b      	lsrs	r3, r3, #8
 80048da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	887a      	ldrh	r2, [r7, #2]
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00d      	beq.n	8004982 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	1c53      	adds	r3, r2, #1
 800496a:	613b      	str	r3, [r7, #16]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1c59      	adds	r1, r3, #1
 8004970:	6179      	str	r1, [r7, #20]
 8004972:	7812      	ldrb	r2, [r2, #0]
 8004974:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3b01      	subs	r3, #1
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f1      	bne.n	8004966 <mem_cpy+0x1a>
	}
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800498e:	b480      	push	{r7}
 8004990:	b087      	sub	sp, #28
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	617a      	str	r2, [r7, #20]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f3      	bne.n	800499e <mem_set+0x10>
}
 80049b6:	bf00      	nop
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	61fa      	str	r2, [r7, #28]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	61ba      	str	r2, [r7, #24]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	1acb      	subs	r3, r1, r3
 80049f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	607b      	str	r3, [r7, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <mem_cmp+0x40>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0eb      	beq.n	80049dc <mem_cmp+0x18>

	return r;
 8004a04:	697b      	ldr	r3, [r7, #20]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3724      	adds	r7, #36	; 0x24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004a1c:	e002      	b.n	8004a24 <chk_chr+0x12>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3301      	adds	r3, #1
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <chk_chr+0x26>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d1f2      	bne.n	8004a1e <chk_chr+0xc>
	return *str;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e029      	b.n	8004ab0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004a5c:	4a27      	ldr	r2, [pc, #156]	; (8004afc <chk_lock+0xb4>)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	4413      	add	r3, r2
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01d      	beq.n	8004aa6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a6a:	4a24      	ldr	r2, [pc, #144]	; (8004afc <chk_lock+0xb4>)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	4413      	add	r3, r2
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d116      	bne.n	8004aaa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <chk_lock+0xb4>)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	4413      	add	r3, r2
 8004a84:	3304      	adds	r3, #4
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d10c      	bne.n	8004aaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004a90:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <chk_lock+0xb4>)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	4413      	add	r3, r2
 8004a98:	3308      	adds	r3, #8
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d102      	bne.n	8004aaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004aa4:	e007      	b.n	8004ab6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3301      	adds	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d9d2      	bls.n	8004a5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d109      	bne.n	8004ad0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <chk_lock+0x80>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d101      	bne.n	8004acc <chk_lock+0x84>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e010      	b.n	8004aee <chk_lock+0xa6>
 8004acc:	2312      	movs	r3, #18
 8004ace:	e00e      	b.n	8004aee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d108      	bne.n	8004ae8 <chk_lock+0xa0>
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <chk_lock+0xb4>)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	4413      	add	r3, r2
 8004ade:	330c      	adds	r3, #12
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae6:	d101      	bne.n	8004aec <chk_lock+0xa4>
 8004ae8:	2310      	movs	r3, #16
 8004aea:	e000      	b.n	8004aee <chk_lock+0xa6>
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000670 	.word	0x20000670

08004b00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b06:	2300      	movs	r3, #0
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	e002      	b.n	8004b12 <enq_lock+0x12>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d806      	bhi.n	8004b26 <enq_lock+0x26>
 8004b18:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <enq_lock+0x40>)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	4413      	add	r3, r2
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f2      	bne.n	8004b0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000670 	.word	0x20000670

08004b44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e01f      	b.n	8004b94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004b54:	4a41      	ldr	r2, [pc, #260]	; (8004c5c <inc_lock+0x118>)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	4413      	add	r3, r2
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d113      	bne.n	8004b8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004b66:	4a3d      	ldr	r2, [pc, #244]	; (8004c5c <inc_lock+0x118>)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	4413      	add	r3, r2
 8004b6e:	3304      	adds	r3, #4
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d109      	bne.n	8004b8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004b7a:	4a38      	ldr	r2, [pc, #224]	; (8004c5c <inc_lock+0x118>)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	4413      	add	r3, r2
 8004b82:	3308      	adds	r3, #8
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d006      	beq.n	8004b9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3301      	adds	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d9dc      	bls.n	8004b54 <inc_lock+0x10>
 8004b9a:	e000      	b.n	8004b9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004b9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d132      	bne.n	8004c0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e002      	b.n	8004bb0 <inc_lock+0x6c>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3301      	adds	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d806      	bhi.n	8004bc4 <inc_lock+0x80>
 8004bb6:	4a29      	ldr	r2, [pc, #164]	; (8004c5c <inc_lock+0x118>)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	4413      	add	r3, r2
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f2      	bne.n	8004baa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d101      	bne.n	8004bce <inc_lock+0x8a>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e040      	b.n	8004c50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4922      	ldr	r1, [pc, #136]	; (8004c5c <inc_lock+0x118>)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	440b      	add	r3, r1
 8004bda:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	491e      	ldr	r1, [pc, #120]	; (8004c5c <inc_lock+0x118>)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	440b      	add	r3, r1
 8004be8:	3304      	adds	r3, #4
 8004bea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	491a      	ldr	r1, [pc, #104]	; (8004c5c <inc_lock+0x118>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004bfc:	4a17      	ldr	r2, [pc, #92]	; (8004c5c <inc_lock+0x118>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	4413      	add	r3, r2
 8004c04:	330c      	adds	r3, #12
 8004c06:	2200      	movs	r2, #0
 8004c08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d009      	beq.n	8004c24 <inc_lock+0xe0>
 8004c10:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <inc_lock+0x118>)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	4413      	add	r3, r2
 8004c18:	330c      	adds	r3, #12
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <inc_lock+0xe0>
 8004c20:	2300      	movs	r3, #0
 8004c22:	e015      	b.n	8004c50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d108      	bne.n	8004c3c <inc_lock+0xf8>
 8004c2a:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <inc_lock+0x118>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	4413      	add	r3, r2
 8004c32:	330c      	adds	r3, #12
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	e001      	b.n	8004c40 <inc_lock+0xfc>
 8004c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c40:	4906      	ldr	r1, [pc, #24]	; (8004c5c <inc_lock+0x118>)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	440b      	add	r3, r1
 8004c48:	330c      	adds	r3, #12
 8004c4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3301      	adds	r3, #1
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	20000670 	.word	0x20000670

08004c60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d825      	bhi.n	8004cc0 <dec_lock+0x60>
		n = Files[i].ctr;
 8004c74:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <dec_lock+0x74>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	4413      	add	r3, r2
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004c82:	89fb      	ldrh	r3, [r7, #14]
 8004c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c88:	d101      	bne.n	8004c8e <dec_lock+0x2e>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004c8e:	89fb      	ldrh	r3, [r7, #14]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <dec_lock+0x3a>
 8004c94:	89fb      	ldrh	r3, [r7, #14]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004c9a:	4a0e      	ldr	r2, [pc, #56]	; (8004cd4 <dec_lock+0x74>)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	4413      	add	r3, r2
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	89fa      	ldrh	r2, [r7, #14]
 8004ca6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004ca8:	89fb      	ldrh	r3, [r7, #14]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d105      	bne.n	8004cba <dec_lock+0x5a>
 8004cae:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <dec_lock+0x74>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	4413      	add	r3, r2
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	737b      	strb	r3, [r7, #13]
 8004cbe:	e001      	b.n	8004cc4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004cc4:	7b7b      	ldrb	r3, [r7, #13]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000670 	.word	0x20000670

08004cd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	e010      	b.n	8004d08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004ce6:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <clear_lock+0x44>)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	4413      	add	r3, r2
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d105      	bne.n	8004d02 <clear_lock+0x2a>
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <clear_lock+0x44>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	4413      	add	r3, r2
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3301      	adds	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d9eb      	bls.n	8004ce6 <clear_lock+0xe>
	}
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	20000670 	.word	0x20000670

08004d20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	78db      	ldrb	r3, [r3, #3]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d034      	beq.n	8004d9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	7858      	ldrb	r0, [r3, #1]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d44:	2301      	movs	r3, #1
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	f7ff fd40 	bl	80047cc <disk_write>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	e022      	b.n	8004d9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d217      	bcs.n	8004d9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	789b      	ldrb	r3, [r3, #2]
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	e010      	b.n	8004d98 <sync_window+0x78>
					wsect += fs->fsize;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	7858      	ldrb	r0, [r3, #1]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	f7ff fd1d 	bl	80047cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d8eb      	bhi.n	8004d76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d01b      	beq.n	8004df8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ffad 	bl	8004d20 <sync_window>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d113      	bne.n	8004df8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7858      	ldrb	r0, [r3, #1]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004dda:	2301      	movs	r3, #1
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	f7ff fcd5 	bl	800478c <disk_read>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004de8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ff87 	bl	8004d20 <sync_window>
 8004e12:	4603      	mov	r3, r0
 8004e14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d158      	bne.n	8004ece <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d148      	bne.n	8004eb6 <sync_fs+0xb2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	791b      	ldrb	r3, [r3, #4]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d144      	bne.n	8004eb6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3330      	adds	r3, #48	; 0x30
 8004e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fda9 	bl	800498e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3330      	adds	r3, #48	; 0x30
 8004e40:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e44:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fd38 	bl	80048be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3330      	adds	r3, #48	; 0x30
 8004e52:	4921      	ldr	r1, [pc, #132]	; (8004ed8 <sync_fs+0xd4>)
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fd4d 	bl	80048f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3330      	adds	r3, #48	; 0x30
 8004e5e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004e62:	491e      	ldr	r1, [pc, #120]	; (8004edc <sync_fs+0xd8>)
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fd45 	bl	80048f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3330      	adds	r3, #48	; 0x30
 8004e6e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f7ff fd3b 	bl	80048f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3330      	adds	r3, #48	; 0x30
 8004e82:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	f7ff fd31 	bl	80048f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	7858      	ldrb	r0, [r3, #1]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f7ff fc8e 	bl	80047cc <disk_write>
			fs->fsi_flag = 0;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fca4 	bl	800480c <disk_ioctl>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <sync_fs+0xca>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	41615252 	.word	0x41615252
 8004edc:	61417272 	.word	0x61417272

08004ee0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	3b02      	subs	r3, #2
 8004eee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	3b02      	subs	r3, #2
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d301      	bcc.n	8004f00 <clust2sect+0x20>
 8004efc:	2300      	movs	r3, #0
 8004efe:	e008      	b.n	8004f12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	895b      	ldrh	r3, [r3, #10]
 8004f04:	461a      	mov	r2, r3
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	fb03 f202 	mul.w	r2, r3, r2
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	4413      	add	r3, r2
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d904      	bls.n	8004f3e <get_fat+0x20>
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004f3e:	2301      	movs	r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	e08f      	b.n	8005064 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f44:	f04f 33ff 	mov.w	r3, #4294967295
 8004f48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d062      	beq.n	8005018 <get_fat+0xfa>
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	dc7c      	bgt.n	8005050 <get_fat+0x132>
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d002      	beq.n	8004f60 <get_fat+0x42>
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d042      	beq.n	8004fe4 <get_fat+0xc6>
 8004f5e:	e077      	b.n	8005050 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	6a1a      	ldr	r2, [r3, #32]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	0a5b      	lsrs	r3, r3, #9
 8004f76:	4413      	add	r3, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	6938      	ldr	r0, [r7, #16]
 8004f7c:	f7ff ff14 	bl	8004da8 <move_window>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d167      	bne.n	8005056 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	60fa      	str	r2, [r7, #12]
 8004f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4413      	add	r3, r2
 8004f94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	0a5b      	lsrs	r3, r3, #9
 8004fa2:	4413      	add	r3, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6938      	ldr	r0, [r7, #16]
 8004fa8:	f7ff fefe 	bl	8004da8 <move_window>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d153      	bne.n	800505a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <get_fat+0xbc>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	e002      	b.n	8004fe0 <get_fat+0xc2>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe0:	617b      	str	r3, [r7, #20]
			break;
 8004fe2:	e03f      	b.n	8005064 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	6a1a      	ldr	r2, [r3, #32]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	4413      	add	r3, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6938      	ldr	r0, [r7, #16]
 8004ff2:	f7ff fed9 	bl	8004da8 <move_window>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d130      	bne.n	800505e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800500a:	4413      	add	r3, r2
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fc1b 	bl	8004848 <ld_word>
 8005012:	4603      	mov	r3, r0
 8005014:	617b      	str	r3, [r7, #20]
			break;
 8005016:	e025      	b.n	8005064 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	09db      	lsrs	r3, r3, #7
 8005020:	4413      	add	r3, r2
 8005022:	4619      	mov	r1, r3
 8005024:	6938      	ldr	r0, [r7, #16]
 8005026:	f7ff febf 	bl	8004da8 <move_window>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d118      	bne.n	8005062 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800503e:	4413      	add	r3, r2
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fc19 	bl	8004878 <ld_dword>
 8005046:	4603      	mov	r3, r0
 8005048:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800504c:	617b      	str	r3, [r7, #20]
			break;
 800504e:	e009      	b.n	8005064 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005050:	2301      	movs	r3, #1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e006      	b.n	8005064 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005056:	bf00      	nop
 8005058:	e004      	b.n	8005064 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800505a:	bf00      	nop
 800505c:	e002      	b.n	8005064 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800505e:	bf00      	nop
 8005060:	e000      	b.n	8005064 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005062:	bf00      	nop
		}
	}

	return val;
 8005064:	697b      	ldr	r3, [r7, #20]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800506e:	b590      	push	{r4, r7, lr}
 8005070:	b089      	sub	sp, #36	; 0x24
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800507a:	2302      	movs	r3, #2
 800507c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b01      	cmp	r3, #1
 8005082:	f240 80d2 	bls.w	800522a <put_fat+0x1bc>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	429a      	cmp	r2, r3
 800508e:	f080 80cc 	bcs.w	800522a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b03      	cmp	r3, #3
 8005098:	f000 8096 	beq.w	80051c8 <put_fat+0x15a>
 800509c:	2b03      	cmp	r3, #3
 800509e:	f300 80cd 	bgt.w	800523c <put_fat+0x1ce>
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d002      	beq.n	80050ac <put_fat+0x3e>
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d06e      	beq.n	8005188 <put_fat+0x11a>
 80050aa:	e0c7      	b.n	800523c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4413      	add	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	0a5b      	lsrs	r3, r3, #9
 80050c2:	4413      	add	r3, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff fe6e 	bl	8004da8 <move_window>
 80050cc:	4603      	mov	r3, r0
 80050ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050d0:	7ffb      	ldrb	r3, [r7, #31]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f040 80ab 	bne.w	800522e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	1c59      	adds	r1, r3, #1
 80050e2:	61b9      	str	r1, [r7, #24]
 80050e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e8:	4413      	add	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <put_fat+0xa4>
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	b25b      	sxtb	r3, r3
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	b25a      	sxtb	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	b25b      	sxtb	r3, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	b25b      	sxtb	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	e001      	b.n	8005116 <put_fat+0xa8>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	0a5b      	lsrs	r3, r3, #9
 8005128:	4413      	add	r3, r2
 800512a:	4619      	mov	r1, r3
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff fe3b 	bl	8004da8 <move_window>
 8005132:	4603      	mov	r3, r0
 8005134:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005136:	7ffb      	ldrb	r3, [r7, #31]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d17a      	bne.n	8005232 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005148:	4413      	add	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <put_fat+0xf0>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	091b      	lsrs	r3, r3, #4
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e00e      	b.n	800517c <put_fat+0x10e>
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	b25b      	sxtb	r3, r3
 8005164:	f023 030f 	bic.w	r3, r3, #15
 8005168:	b25a      	sxtb	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	b25b      	sxtb	r3, r3
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	b25b      	sxtb	r3, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	b25b      	sxtb	r3, r3
 800517a:	b2db      	uxtb	r3, r3
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	70da      	strb	r2, [r3, #3]
			break;
 8005186:	e059      	b.n	800523c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	4413      	add	r3, r2
 8005192:	4619      	mov	r1, r3
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7ff fe07 	bl	8004da8 <move_window>
 800519a:	4603      	mov	r3, r0
 800519c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800519e:	7ffb      	ldrb	r3, [r7, #31]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d148      	bne.n	8005236 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80051b2:	4413      	add	r3, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	b292      	uxth	r2, r2
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fb7f 	bl	80048be <st_word>
			fs->wflag = 1;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	70da      	strb	r2, [r3, #3]
			break;
 80051c6:	e039      	b.n	800523c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	09db      	lsrs	r3, r3, #7
 80051d0:	4413      	add	r3, r2
 80051d2:	4619      	mov	r1, r3
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7ff fde7 	bl	8004da8 <move_window>
 80051da:	4603      	mov	r3, r0
 80051dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051de:	7ffb      	ldrb	r3, [r7, #31]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d12a      	bne.n	800523a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80051f8:	4413      	add	r3, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fb3c 	bl	8004878 <ld_dword>
 8005200:	4603      	mov	r3, r0
 8005202:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005206:	4323      	orrs	r3, r4
 8005208:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005218:	4413      	add	r3, r2
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fb69 	bl	80048f4 <st_dword>
			fs->wflag = 1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	70da      	strb	r2, [r3, #3]
			break;
 8005228:	e008      	b.n	800523c <put_fat+0x1ce>
		}
	}
 800522a:	bf00      	nop
 800522c:	e006      	b.n	800523c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800522e:	bf00      	nop
 8005230:	e004      	b.n	800523c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005232:	bf00      	nop
 8005234:	e002      	b.n	800523c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005236:	bf00      	nop
 8005238:	e000      	b.n	800523c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800523a:	bf00      	nop
	return res;
 800523c:	7ffb      	ldrb	r3, [r7, #31]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3724      	adds	r7, #36	; 0x24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd90      	pop	{r4, r7, pc}

08005246 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b088      	sub	sp, #32
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d904      	bls.n	800526c <remove_chain+0x26>
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	d301      	bcc.n	8005270 <remove_chain+0x2a>
 800526c:	2302      	movs	r3, #2
 800526e:	e04b      	b.n	8005308 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00c      	beq.n	8005290 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	69b8      	ldr	r0, [r7, #24]
 800527e:	f7ff fef6 	bl	800506e <put_fat>
 8005282:	4603      	mov	r3, r0
 8005284:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005286:	7ffb      	ldrb	r3, [r7, #31]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <remove_chain+0x4a>
 800528c:	7ffb      	ldrb	r3, [r7, #31]
 800528e:	e03b      	b.n	8005308 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff fe43 	bl	8004f1e <get_fat>
 8005298:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d031      	beq.n	8005304 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <remove_chain+0x64>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e02e      	b.n	8005308 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d101      	bne.n	80052b6 <remove_chain+0x70>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e028      	b.n	8005308 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80052b6:	2200      	movs	r2, #0
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	69b8      	ldr	r0, [r7, #24]
 80052bc:	f7ff fed7 	bl	800506e <put_fat>
 80052c0:	4603      	mov	r3, r0
 80052c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80052c4:	7ffb      	ldrb	r3, [r7, #31]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <remove_chain+0x88>
 80052ca:	7ffb      	ldrb	r3, [r7, #31]
 80052cc:	e01c      	b.n	8005308 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	3b02      	subs	r3, #2
 80052d8:	429a      	cmp	r2, r3
 80052da:	d20b      	bcs.n	80052f4 <remove_chain+0xae>
			fs->free_clst++;
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	791b      	ldrb	r3, [r3, #4]
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d3c6      	bcc.n	8005290 <remove_chain+0x4a>
 8005302:	e000      	b.n	8005306 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005304:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10d      	bne.n	8005342 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <create_chain+0x2c>
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	429a      	cmp	r2, r3
 800533a:	d31b      	bcc.n	8005374 <create_chain+0x64>
 800533c:	2301      	movs	r3, #1
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	e018      	b.n	8005374 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fdea 	bl	8004f1e <get_fat>
 800534a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d801      	bhi.n	8005356 <create_chain+0x46>
 8005352:	2301      	movs	r3, #1
 8005354:	e070      	b.n	8005438 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d101      	bne.n	8005362 <create_chain+0x52>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	e06a      	b.n	8005438 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	429a      	cmp	r2, r3
 800536a:	d201      	bcs.n	8005370 <create_chain+0x60>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	e063      	b.n	8005438 <create_chain+0x128>
		scl = clst;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	3301      	adds	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	429a      	cmp	r2, r3
 8005386:	d307      	bcc.n	8005398 <create_chain+0x88>
				ncl = 2;
 8005388:	2302      	movs	r3, #2
 800538a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	429a      	cmp	r2, r3
 8005392:	d901      	bls.n	8005398 <create_chain+0x88>
 8005394:	2300      	movs	r3, #0
 8005396:	e04f      	b.n	8005438 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005398:	69f9      	ldr	r1, [r7, #28]
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fdbf 	bl	8004f1e <get_fat>
 80053a0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00e      	beq.n	80053c6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d003      	beq.n	80053b6 <create_chain+0xa6>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d101      	bne.n	80053ba <create_chain+0xaa>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	e03e      	b.n	8005438 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d1da      	bne.n	8005378 <create_chain+0x68>
 80053c2:	2300      	movs	r3, #0
 80053c4:	e038      	b.n	8005438 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80053c6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	69f9      	ldr	r1, [r7, #28]
 80053ce:	6938      	ldr	r0, [r7, #16]
 80053d0:	f7ff fe4d 	bl	800506e <put_fat>
 80053d4:	4603      	mov	r3, r0
 80053d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <create_chain+0xe2>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d006      	beq.n	80053f2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	6938      	ldr	r0, [r7, #16]
 80053ea:	f7ff fe40 	bl	800506e <put_fat>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d116      	bne.n	8005426 <create_chain+0x116>
		fs->last_clst = ncl;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	3b02      	subs	r3, #2
 8005408:	429a      	cmp	r2, r3
 800540a:	d804      	bhi.n	8005416 <create_chain+0x106>
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	1e5a      	subs	r2, r3, #1
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	791b      	ldrb	r3, [r3, #4]
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	b2da      	uxtb	r2, r3
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	711a      	strb	r2, [r3, #4]
 8005424:	e007      	b.n	8005436 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005426:	7dfb      	ldrb	r3, [r7, #23]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d102      	bne.n	8005432 <create_chain+0x122>
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
 8005430:	e000      	b.n	8005434 <create_chain+0x124>
 8005432:	2301      	movs	r3, #1
 8005434:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005436:	69fb      	ldr	r3, [r7, #28]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	3304      	adds	r3, #4
 8005456:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	0a5b      	lsrs	r3, r3, #9
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	8952      	ldrh	r2, [r2, #10]
 8005460:	fbb3 f3f2 	udiv	r3, r3, r2
 8005464:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1d1a      	adds	r2, r3, #4
 800546a:	613a      	str	r2, [r7, #16]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <clmt_clust+0x3a>
 8005476:	2300      	movs	r3, #0
 8005478:	e010      	b.n	800549c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	d307      	bcc.n	8005492 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	3304      	adds	r3, #4
 800548e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005490:	e7e9      	b.n	8005466 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005492:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
}
 800549c:	4618      	mov	r0, r3
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054be:	d204      	bcs.n	80054ca <dir_sdi+0x22>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <dir_sdi+0x26>
		return FR_INT_ERR;
 80054ca:	2302      	movs	r3, #2
 80054cc:	e063      	b.n	8005596 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <dir_sdi+0x46>
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d902      	bls.n	80054ee <dir_sdi+0x46>
		clst = fs->dirbase;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10c      	bne.n	800550e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	8912      	ldrh	r2, [r2, #8]
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d301      	bcc.n	8005504 <dir_sdi+0x5c>
 8005500:	2302      	movs	r3, #2
 8005502:	e048      	b.n	8005596 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	61da      	str	r2, [r3, #28]
 800550c:	e029      	b.n	8005562 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	895b      	ldrh	r3, [r3, #10]
 8005512:	025b      	lsls	r3, r3, #9
 8005514:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005516:	e019      	b.n	800554c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6979      	ldr	r1, [r7, #20]
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff fcfe 	bl	8004f1e <get_fat>
 8005522:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552a:	d101      	bne.n	8005530 <dir_sdi+0x88>
 800552c:	2301      	movs	r3, #1
 800552e:	e032      	b.n	8005596 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d904      	bls.n	8005540 <dir_sdi+0x98>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	429a      	cmp	r2, r3
 800553e:	d301      	bcc.n	8005544 <dir_sdi+0x9c>
 8005540:	2302      	movs	r3, #2
 8005542:	e028      	b.n	8005596 <dir_sdi+0xee>
			ofs -= csz;
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	429a      	cmp	r2, r3
 8005552:	d2e1      	bcs.n	8005518 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005554:	6979      	ldr	r1, [r7, #20]
 8005556:	6938      	ldr	r0, [r7, #16]
 8005558:	f7ff fcc2 	bl	8004ee0 <clust2sect>
 800555c:	4602      	mov	r2, r0
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <dir_sdi+0xcc>
 8005570:	2302      	movs	r3, #2
 8005572:	e010      	b.n	8005596 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	0a5b      	lsrs	r3, r3, #9
 800557c:	441a      	add	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558e:	441a      	add	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	3320      	adds	r3, #32
 80055b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <dir_next+0x28>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055c4:	d301      	bcc.n	80055ca <dir_next+0x2c>
 80055c6:	2304      	movs	r3, #4
 80055c8:	e0aa      	b.n	8005720 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f040 8098 	bne.w	8005706 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10b      	bne.n	8005600 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	8912      	ldrh	r2, [r2, #8]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	f0c0 8088 	bcc.w	8005706 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	61da      	str	r2, [r3, #28]
 80055fc:	2304      	movs	r3, #4
 80055fe:	e08f      	b.n	8005720 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	0a5b      	lsrs	r3, r3, #9
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	8952      	ldrh	r2, [r2, #10]
 8005608:	3a01      	subs	r2, #1
 800560a:	4013      	ands	r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d17a      	bne.n	8005706 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f7ff fc80 	bl	8004f1e <get_fat>
 800561e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d801      	bhi.n	800562a <dir_next+0x8c>
 8005626:	2302      	movs	r3, #2
 8005628:	e07a      	b.n	8005720 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d101      	bne.n	8005636 <dir_next+0x98>
 8005632:	2301      	movs	r3, #1
 8005634:	e074      	b.n	8005720 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	429a      	cmp	r2, r3
 800563e:	d358      	bcc.n	80056f2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	61da      	str	r2, [r3, #28]
 800564c:	2304      	movs	r3, #4
 800564e:	e067      	b.n	8005720 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	4619      	mov	r1, r3
 8005658:	4610      	mov	r0, r2
 800565a:	f7ff fe59 	bl	8005310 <create_chain>
 800565e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <dir_next+0xcc>
 8005666:	2307      	movs	r3, #7
 8005668:	e05a      	b.n	8005720 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <dir_next+0xd6>
 8005670:	2302      	movs	r3, #2
 8005672:	e055      	b.n	8005720 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d101      	bne.n	8005680 <dir_next+0xe2>
 800567c:	2301      	movs	r3, #1
 800567e:	e04f      	b.n	8005720 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff fb4d 	bl	8004d20 <sync_window>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <dir_next+0xf2>
 800568c:	2301      	movs	r3, #1
 800568e:	e047      	b.n	8005720 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3330      	adds	r3, #48	; 0x30
 8005694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005698:	2100      	movs	r1, #0
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff f977 	bl	800498e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	6979      	ldr	r1, [r7, #20]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fc1a 	bl	8004ee0 <clust2sect>
 80056ac:	4602      	mov	r2, r0
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80056b2:	e012      	b.n	80056da <dir_next+0x13c>
						fs->wflag = 1;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff fb30 	bl	8004d20 <sync_window>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <dir_next+0x12c>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e02a      	b.n	8005720 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	895b      	ldrh	r3, [r3, #10]
 80056de:	461a      	mov	r2, r3
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d3e6      	bcc.n	80056b4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80056f8:	6979      	ldr	r1, [r7, #20]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fbf0 	bl	8004ee0 <clust2sect>
 8005700:	4602      	mov	r2, r0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005718:	441a      	add	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005738:	2100      	movs	r1, #0
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff feb4 	bl	80054a8 <dir_sdi>
 8005740:	4603      	mov	r3, r0
 8005742:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005744:	7dfb      	ldrb	r3, [r7, #23]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d12b      	bne.n	80057a2 <dir_alloc+0x7a>
		n = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	4619      	mov	r1, r3
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff fb27 	bl	8004da8 <move_window>
 800575a:	4603      	mov	r3, r0
 800575c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d11d      	bne.n	80057a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2be5      	cmp	r3, #229	; 0xe5
 800576c:	d004      	beq.n	8005778 <dir_alloc+0x50>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d107      	bne.n	8005788 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	3301      	adds	r3, #1
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d102      	bne.n	800578c <dir_alloc+0x64>
 8005786:	e00c      	b.n	80057a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800578c:	2101      	movs	r1, #1
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff ff05 	bl	800559e <dir_next>
 8005794:	4603      	mov	r3, r0
 8005796:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0d7      	beq.n	800574e <dir_alloc+0x26>
 800579e:	e000      	b.n	80057a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80057a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80057a2:	7dfb      	ldrb	r3, [r7, #23]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d101      	bne.n	80057ac <dir_alloc+0x84>
 80057a8:	2307      	movs	r3, #7
 80057aa:	75fb      	strb	r3, [r7, #23]
	return res;
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	331a      	adds	r3, #26
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff f83f 	bl	8004848 <ld_word>
 80057ca:	4603      	mov	r3, r0
 80057cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d109      	bne.n	80057ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	3314      	adds	r3, #20
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff f834 	bl	8004848 <ld_word>
 80057e0:	4603      	mov	r3, r0
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80057ea:	68fb      	ldr	r3, [r7, #12]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	331a      	adds	r3, #26
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	b292      	uxth	r2, r2
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff f857 	bl	80048be <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b03      	cmp	r3, #3
 8005816:	d109      	bne.n	800582c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f103 0214 	add.w	r2, r3, #20
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	0c1b      	lsrs	r3, r3, #16
 8005822:	b29b      	uxth	r3, r3
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f7ff f849 	bl	80048be <st_word>
	}
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800583e:	2304      	movs	r3, #4
 8005840:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8005848:	e03c      	b.n	80058c4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	4619      	mov	r1, r3
 8005850:	6938      	ldr	r0, [r7, #16]
 8005852:	f7ff faa9 	bl	8004da8 <move_window>
 8005856:	4603      	mov	r3, r0
 8005858:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800585a:	7dfb      	ldrb	r3, [r7, #23]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d136      	bne.n	80058ce <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800586e:	2304      	movs	r3, #4
 8005870:	75fb      	strb	r3, [r7, #23]
 8005872:	e031      	b.n	80058d8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	330b      	adds	r3, #11
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005880:	73bb      	strb	r3, [r7, #14]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	7bba      	ldrb	r2, [r7, #14]
 8005886:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2be5      	cmp	r3, #229	; 0xe5
 800588c:	d011      	beq.n	80058b2 <dir_read+0x7e>
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b2e      	cmp	r3, #46	; 0x2e
 8005892:	d00e      	beq.n	80058b2 <dir_read+0x7e>
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b0f      	cmp	r3, #15
 8005898:	d00b      	beq.n	80058b2 <dir_read+0x7e>
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	f023 0320 	bic.w	r3, r3, #32
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	bf0c      	ite	eq
 80058a4:	2301      	moveq	r3, #1
 80058a6:	2300      	movne	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80058b2:	2100      	movs	r1, #0
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff fe72 	bl	800559e <dir_next>
 80058ba:	4603      	mov	r3, r0
 80058bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d108      	bne.n	80058d6 <dir_read+0xa2>
	while (dp->sect) {
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1be      	bne.n	800584a <dir_read+0x16>
 80058cc:	e004      	b.n	80058d8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80058ce:	bf00      	nop
 80058d0:	e002      	b.n	80058d8 <dir_read+0xa4>
				break;
 80058d2:	bf00      	nop
 80058d4:	e000      	b.n	80058d8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80058d6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <dir_read+0xb0>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	61da      	str	r2, [r3, #28]
	return res;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b086      	sub	sp, #24
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80058fc:	2100      	movs	r1, #0
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff fdd2 	bl	80054a8 <dir_sdi>
 8005904:	4603      	mov	r3, r0
 8005906:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <dir_find+0x24>
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	e03e      	b.n	8005990 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	4619      	mov	r1, r3
 8005918:	6938      	ldr	r0, [r7, #16]
 800591a:	f7ff fa45 	bl	8004da8 <move_window>
 800591e:	4603      	mov	r3, r0
 8005920:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005922:	7dfb      	ldrb	r3, [r7, #23]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d12f      	bne.n	8005988 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d102      	bne.n	800593c <dir_find+0x4e>
 8005936:	2304      	movs	r3, #4
 8005938:	75fb      	strb	r3, [r7, #23]
 800593a:	e028      	b.n	800598e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	330b      	adds	r3, #11
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005948:	b2da      	uxtb	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	330b      	adds	r3, #11
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <dir_find+0x86>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a18      	ldr	r0, [r3, #32]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3324      	adds	r3, #36	; 0x24
 8005966:	220b      	movs	r2, #11
 8005968:	4619      	mov	r1, r3
 800596a:	f7ff f82b 	bl	80049c4 <mem_cmp>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005974:	2100      	movs	r1, #0
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fe11 	bl	800559e <dir_next>
 800597c:	4603      	mov	r3, r0
 800597e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0c5      	beq.n	8005912 <dir_find+0x24>
 8005986:	e002      	b.n	800598e <dir_find+0xa0>
		if (res != FR_OK) break;
 8005988:	bf00      	nop
 800598a:	e000      	b.n	800598e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800598c:	bf00      	nop

	return res;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80059a6:	2101      	movs	r1, #1
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff febd 	bl	8005728 <dir_alloc>
 80059ae:	4603      	mov	r3, r0
 80059b0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11c      	bne.n	80059f2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	4619      	mov	r1, r3
 80059be:	68b8      	ldr	r0, [r7, #8]
 80059c0:	f7ff f9f2 	bl	8004da8 <move_window>
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d111      	bne.n	80059f2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	2220      	movs	r2, #32
 80059d4:	2100      	movs	r1, #0
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe ffd9 	bl	800498e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a18      	ldr	r0, [r3, #32]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3324      	adds	r3, #36	; 0x24
 80059e4:	220b      	movs	r2, #11
 80059e6:	4619      	mov	r1, r3
 80059e8:	f7fe ffb0 	bl	800494c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2201      	movs	r2, #1
 80059f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff f9c9 	bl	8004da8 <move_window>
 8005a16:	4603      	mov	r3, r0
 8005a18:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8005a1a:	7afb      	ldrb	r3, [r7, #11]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	22e5      	movs	r2, #229	; 0xe5
 8005a26:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8005a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2200      	movs	r2, #0
 8005a46:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d04e      	beq.n	8005aee <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8005a58:	e021      	b.n	8005a9e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1a      	ldr	r2, [r3, #32]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	1c59      	adds	r1, r3, #1
 8005a62:	6179      	str	r1, [r7, #20]
 8005a64:	4413      	add	r3, r2
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d100      	bne.n	8005a72 <get_fileinfo+0x3a>
 8005a70:	e015      	b.n	8005a9e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	2b05      	cmp	r3, #5
 8005a76:	d101      	bne.n	8005a7c <get_fileinfo+0x44>
 8005a78:	23e5      	movs	r3, #229	; 0xe5
 8005a7a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b09      	cmp	r3, #9
 8005a80:	d106      	bne.n	8005a90 <get_fileinfo+0x58>
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	613a      	str	r2, [r7, #16]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	222e      	movs	r2, #46	; 0x2e
 8005a8e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	613a      	str	r2, [r7, #16]
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	4413      	add	r3, r2
 8005a9a:	7bfa      	ldrb	r2, [r7, #15]
 8005a9c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b0a      	cmp	r3, #10
 8005aa2:	d9da      	bls.n	8005a5a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3309      	adds	r3, #9
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	7ada      	ldrb	r2, [r3, #11]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	331c      	adds	r3, #28
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe fed9 	bl	8004878 <ld_dword>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	3316      	adds	r3, #22
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fed0 	bl	8004878 <ld_dword>
 8005ad8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	80da      	strh	r2, [r3, #6]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	809a      	strh	r2, [r3, #4]
 8005aec:	e000      	b.n	8005af0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005aee:	bf00      	nop
}
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3324      	adds	r3, #36	; 0x24
 8005b0c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005b0e:	220b      	movs	r2, #11
 8005b10:	2120      	movs	r1, #32
 8005b12:	68b8      	ldr	r0, [r7, #8]
 8005b14:	f7fe ff3b 	bl	800498e <mem_set>
	si = i = 0; ni = 8;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	2308      	movs	r3, #8
 8005b22:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	61fa      	str	r2, [r7, #28]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005b32:	7efb      	ldrb	r3, [r7, #27]
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d94e      	bls.n	8005bd6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005b38:	7efb      	ldrb	r3, [r7, #27]
 8005b3a:	2b2f      	cmp	r3, #47	; 0x2f
 8005b3c:	d006      	beq.n	8005b4c <create_name+0x54>
 8005b3e:	7efb      	ldrb	r3, [r7, #27]
 8005b40:	2b5c      	cmp	r3, #92	; 0x5c
 8005b42:	d110      	bne.n	8005b66 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005b44:	e002      	b.n	8005b4c <create_name+0x54>
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b2f      	cmp	r3, #47	; 0x2f
 8005b56:	d0f6      	beq.n	8005b46 <create_name+0x4e>
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b5c      	cmp	r3, #92	; 0x5c
 8005b62:	d0f0      	beq.n	8005b46 <create_name+0x4e>
			break;
 8005b64:	e038      	b.n	8005bd8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005b66:	7efb      	ldrb	r3, [r7, #27]
 8005b68:	2b2e      	cmp	r3, #46	; 0x2e
 8005b6a:	d003      	beq.n	8005b74 <create_name+0x7c>
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d30c      	bcc.n	8005b8e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2b0b      	cmp	r3, #11
 8005b78:	d002      	beq.n	8005b80 <create_name+0x88>
 8005b7a:	7efb      	ldrb	r3, [r7, #27]
 8005b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b7e:	d001      	beq.n	8005b84 <create_name+0x8c>
 8005b80:	2306      	movs	r3, #6
 8005b82:	e044      	b.n	8005c0e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005b84:	2308      	movs	r3, #8
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	230b      	movs	r3, #11
 8005b8a:	617b      	str	r3, [r7, #20]
			continue;
 8005b8c:	e022      	b.n	8005bd4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005b8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	da04      	bge.n	8005ba0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005b96:	7efb      	ldrb	r3, [r7, #27]
 8005b98:	3b80      	subs	r3, #128	; 0x80
 8005b9a:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <create_name+0x120>)
 8005b9c:	5cd3      	ldrb	r3, [r2, r3]
 8005b9e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005ba0:	7efb      	ldrb	r3, [r7, #27]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	481d      	ldr	r0, [pc, #116]	; (8005c1c <create_name+0x124>)
 8005ba6:	f7fe ff34 	bl	8004a12 <chk_chr>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <create_name+0xbc>
 8005bb0:	2306      	movs	r3, #6
 8005bb2:	e02c      	b.n	8005c0e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005bb4:	7efb      	ldrb	r3, [r7, #27]
 8005bb6:	2b60      	cmp	r3, #96	; 0x60
 8005bb8:	d905      	bls.n	8005bc6 <create_name+0xce>
 8005bba:	7efb      	ldrb	r3, [r7, #27]
 8005bbc:	2b7a      	cmp	r3, #122	; 0x7a
 8005bbe:	d802      	bhi.n	8005bc6 <create_name+0xce>
 8005bc0:	7efb      	ldrb	r3, [r7, #27]
 8005bc2:	3b20      	subs	r3, #32
 8005bc4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	613a      	str	r2, [r7, #16]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	4413      	add	r3, r2
 8005bd0:	7efa      	ldrb	r2, [r7, #27]
 8005bd2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005bd4:	e7a6      	b.n	8005b24 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005bd6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	441a      	add	r2, r3
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <create_name+0xf4>
 8005be8:	2306      	movs	r3, #6
 8005bea:	e010      	b.n	8005c0e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2be5      	cmp	r3, #229	; 0xe5
 8005bf2:	d102      	bne.n	8005bfa <create_name+0x102>
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2205      	movs	r2, #5
 8005bf8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005bfa:	7efb      	ldrb	r3, [r7, #27]
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d801      	bhi.n	8005c04 <create_name+0x10c>
 8005c00:	2204      	movs	r2, #4
 8005c02:	e000      	b.n	8005c06 <create_name+0x10e>
 8005c04:	2200      	movs	r2, #0
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	330b      	adds	r3, #11
 8005c0a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005c0c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	08007dd8 	.word	0x08007dd8
 8005c1c:	08007d68 	.word	0x08007d68

08005c20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c34:	e002      	b.n	8005c3c <follow_path+0x1c>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b2f      	cmp	r3, #47	; 0x2f
 8005c42:	d0f8      	beq.n	8005c36 <follow_path+0x16>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b5c      	cmp	r3, #92	; 0x5c
 8005c4a:	d0f4      	beq.n	8005c36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b1f      	cmp	r3, #31
 8005c58:	d80a      	bhi.n	8005c70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2280      	movs	r2, #128	; 0x80
 8005c5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005c62:	2100      	movs	r1, #0
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fc1f 	bl	80054a8 <dir_sdi>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]
 8005c6e:	e043      	b.n	8005cf8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c70:	463b      	mov	r3, r7
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff ff3f 	bl	8005af8 <create_name>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d134      	bne.n	8005cee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff fe32 	bl	80058ee <dir_find>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d127      	bne.n	8005cf2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005ca2:	7afb      	ldrb	r3, [r7, #11]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d122      	bne.n	8005cf2 <follow_path+0xd2>
 8005cac:	2305      	movs	r3, #5
 8005cae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005cb0:	e01f      	b.n	8005cf2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005cb2:	7afb      	ldrb	r3, [r7, #11]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d11c      	bne.n	8005cf6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	799b      	ldrb	r3, [r3, #6]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005cc8:	2305      	movs	r3, #5
 8005cca:	75fb      	strb	r3, [r7, #23]
 8005ccc:	e014      	b.n	8005cf8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cdc:	4413      	add	r3, r2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff fd68 	bl	80057b6 <ld_clust>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005cec:	e7c0      	b.n	8005c70 <follow_path+0x50>
			if (res != FR_OK) break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <follow_path+0xd8>
				break;
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005cf6:	bf00      	nop
			}
		}
	}

	return res;
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b087      	sub	sp, #28
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d031      	beq.n	8005d7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	e002      	b.n	8005d26 <get_ldnumber+0x24>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	3301      	adds	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d903      	bls.n	8005d36 <get_ldnumber+0x34>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b3a      	cmp	r3, #58	; 0x3a
 8005d34:	d1f4      	bne.n	8005d20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b3a      	cmp	r3, #58	; 0x3a
 8005d3c:	d11c      	bne.n	8005d78 <get_ldnumber+0x76>
			tp = *path;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	60fa      	str	r2, [r7, #12]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	3b30      	subs	r3, #48	; 0x30
 8005d4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d80e      	bhi.n	8005d74 <get_ldnumber+0x72>
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d10a      	bne.n	8005d74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d107      	bne.n	8005d74 <get_ldnumber+0x72>
					vol = (int)i;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	e002      	b.n	8005d7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d78:	2300      	movs	r3, #0
 8005d7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d7c:	693b      	ldr	r3, [r7, #16]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
	...

08005d8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	70da      	strb	r2, [r3, #3]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fe fffe 	bl	8004da8 <move_window>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <check_fs+0x2a>
 8005db2:	2304      	movs	r3, #4
 8005db4:	e038      	b.n	8005e28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3330      	adds	r3, #48	; 0x30
 8005dba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fd42 	bl	8004848 <ld_word>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d001      	beq.n	8005dd4 <check_fs+0x48>
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e029      	b.n	8005e28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dda:	2be9      	cmp	r3, #233	; 0xe9
 8005ddc:	d009      	beq.n	8005df2 <check_fs+0x66>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005de4:	2beb      	cmp	r3, #235	; 0xeb
 8005de6:	d11e      	bne.n	8005e26 <check_fs+0x9a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005dee:	2b90      	cmp	r3, #144	; 0x90
 8005df0:	d119      	bne.n	8005e26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3330      	adds	r3, #48	; 0x30
 8005df6:	3336      	adds	r3, #54	; 0x36
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fd3d 	bl	8004878 <ld_dword>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e04:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <check_fs+0xa4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d101      	bne.n	8005e0e <check_fs+0x82>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e00c      	b.n	8005e28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3330      	adds	r3, #48	; 0x30
 8005e12:	3352      	adds	r3, #82	; 0x52
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe fd2f 	bl	8004878 <ld_dword>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4a05      	ldr	r2, [pc, #20]	; (8005e34 <check_fs+0xa8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d101      	bne.n	8005e26 <check_fs+0x9a>
 8005e22:	2300      	movs	r3, #0
 8005e24:	e000      	b.n	8005e28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e26:	2302      	movs	r3, #2
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	00544146 	.word	0x00544146
 8005e34:	33544146 	.word	0x33544146

08005e38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b096      	sub	sp, #88	; 0x58
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff ff58 	bl	8005d02 <get_ldnumber>
 8005e52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	da01      	bge.n	8005e5e <find_volume+0x26>
 8005e5a:	230b      	movs	r3, #11
 8005e5c:	e22d      	b.n	80062ba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005e5e:	4aa1      	ldr	r2, [pc, #644]	; (80060e4 <find_volume+0x2ac>)
 8005e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <find_volume+0x3a>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	e223      	b.n	80062ba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	f023 0301 	bic.w	r3, r3, #1
 8005e7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01a      	beq.n	8005ebe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fe fc3d 	bl	800470c <disk_status>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10c      	bne.n	8005ebe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <find_volume+0x82>
 8005eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	e1ff      	b.n	80062ba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e1fd      	b.n	80062ba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe fc35 	bl	8004740 <disk_initialize>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e1e6      	b.n	80062ba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <find_volume+0xca>
 8005ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005efe:	230a      	movs	r3, #10
 8005f00:	e1db      	b.n	80062ba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005f06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f0a:	f7ff ff3f 	bl	8005d8c <check_fs>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d149      	bne.n	8005fb0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f20:	e01e      	b.n	8005f60 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005f30:	4413      	add	r3, r2
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	3304      	adds	r3, #4
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d006      	beq.n	8005f4c <find_volume+0x114>
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	3308      	adds	r3, #8
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fc98 	bl	8004878 <ld_dword>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	e000      	b.n	8005f4e <find_volume+0x116>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	3358      	adds	r3, #88	; 0x58
 8005f54:	443b      	add	r3, r7
 8005f56:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d9dd      	bls.n	8005f22 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f66:	2300      	movs	r3, #0
 8005f68:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <find_volume+0x13e>
 8005f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f72:	3b01      	subs	r3, #1
 8005f74:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	3358      	adds	r3, #88	; 0x58
 8005f7c:	443b      	add	r3, r7
 8005f7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <find_volume+0x15e>
 8005f8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f8e:	f7ff fefd 	bl	8005d8c <check_fs>
 8005f92:	4603      	mov	r3, r0
 8005f94:	e000      	b.n	8005f98 <find_volume+0x160>
 8005f96:	2303      	movs	r3, #3
 8005f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d905      	bls.n	8005fb0 <find_volume+0x178>
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8005faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d9e2      	bls.n	8005f76 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d101      	bne.n	8005fbc <find_volume+0x184>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e17e      	b.n	80062ba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d901      	bls.n	8005fc8 <find_volume+0x190>
 8005fc4:	230d      	movs	r3, #13
 8005fc6:	e178      	b.n	80062ba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	3330      	adds	r3, #48	; 0x30
 8005fcc:	330b      	adds	r3, #11
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe fc3a 	bl	8004848 <ld_word>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fda:	d001      	beq.n	8005fe0 <find_volume+0x1a8>
 8005fdc:	230d      	movs	r3, #13
 8005fde:	e16c      	b.n	80062ba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	3330      	adds	r3, #48	; 0x30
 8005fe4:	3316      	adds	r3, #22
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fc2e 	bl	8004848 <ld_word>
 8005fec:	4603      	mov	r3, r0
 8005fee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <find_volume+0x1cc>
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	3330      	adds	r3, #48	; 0x30
 8005ffa:	3324      	adds	r3, #36	; 0x24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe fc3b 	bl	8004878 <ld_dword>
 8006002:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006008:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	789b      	ldrb	r3, [r3, #2]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d005      	beq.n	8006028 <find_volume+0x1f0>
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	789b      	ldrb	r3, [r3, #2]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d001      	beq.n	8006028 <find_volume+0x1f0>
 8006024:	230d      	movs	r3, #13
 8006026:	e148      	b.n	80062ba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	789b      	ldrb	r3, [r3, #2]
 800602c:	461a      	mov	r2, r3
 800602e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006030:	fb02 f303 	mul.w	r3, r2, r3
 8006034:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603c:	b29a      	uxth	r2, r3
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	895b      	ldrh	r3, [r3, #10]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d008      	beq.n	800605c <find_volume+0x224>
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	895b      	ldrh	r3, [r3, #10]
 800604e:	461a      	mov	r2, r3
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	895b      	ldrh	r3, [r3, #10]
 8006054:	3b01      	subs	r3, #1
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <find_volume+0x228>
 800605c:	230d      	movs	r3, #13
 800605e:	e12c      	b.n	80062ba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	3330      	adds	r3, #48	; 0x30
 8006064:	3311      	adds	r3, #17
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fbee 	bl	8004848 <ld_word>
 800606c:	4603      	mov	r3, r0
 800606e:	461a      	mov	r2, r3
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	891b      	ldrh	r3, [r3, #8]
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <find_volume+0x24e>
 8006082:	230d      	movs	r3, #13
 8006084:	e119      	b.n	80062ba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	3330      	adds	r3, #48	; 0x30
 800608a:	3313      	adds	r3, #19
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fbdb 	bl	8004848 <ld_word>
 8006092:	4603      	mov	r3, r0
 8006094:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <find_volume+0x272>
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	3330      	adds	r3, #48	; 0x30
 80060a0:	3320      	adds	r3, #32
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fbe8 	bl	8004878 <ld_dword>
 80060a8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	3330      	adds	r3, #48	; 0x30
 80060ae:	330e      	adds	r3, #14
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe fbc9 	bl	8004848 <ld_word>
 80060b6:	4603      	mov	r3, r0
 80060b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <find_volume+0x28c>
 80060c0:	230d      	movs	r3, #13
 80060c2:	e0fa      	b.n	80062ba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80060c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c8:	4413      	add	r3, r2
 80060ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060cc:	8912      	ldrh	r2, [r2, #8]
 80060ce:	0912      	lsrs	r2, r2, #4
 80060d0:	b292      	uxth	r2, r2
 80060d2:	4413      	add	r3, r2
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80060d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	429a      	cmp	r2, r3
 80060dc:	d204      	bcs.n	80060e8 <find_volume+0x2b0>
 80060de:	230d      	movs	r3, #13
 80060e0:	e0eb      	b.n	80062ba <find_volume+0x482>
 80060e2:	bf00      	nop
 80060e4:	20000668 	.word	0x20000668
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80060e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f0:	8952      	ldrh	r2, [r2, #10]
 80060f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <find_volume+0x2ca>
 80060fe:	230d      	movs	r3, #13
 8006100:	e0db      	b.n	80062ba <find_volume+0x482>
		fmt = FS_FAT32;
 8006102:	2303      	movs	r3, #3
 8006104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800610e:	4293      	cmp	r3, r2
 8006110:	d802      	bhi.n	8006118 <find_volume+0x2e0>
 8006112:	2302      	movs	r3, #2
 8006114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800611e:	4293      	cmp	r3, r2
 8006120:	d802      	bhi.n	8006128 <find_volume+0x2f0>
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1c9a      	adds	r2, r3, #2
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006134:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006136:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800613a:	441a      	add	r2, r3
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006140:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	441a      	add	r2, r3
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800614a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800614e:	2b03      	cmp	r3, #3
 8006150:	d11e      	bne.n	8006190 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	3330      	adds	r3, #48	; 0x30
 8006156:	332a      	adds	r3, #42	; 0x2a
 8006158:	4618      	mov	r0, r3
 800615a:	f7fe fb75 	bl	8004848 <ld_word>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <find_volume+0x330>
 8006164:	230d      	movs	r3, #13
 8006166:	e0a8      	b.n	80062ba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	891b      	ldrh	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <find_volume+0x33c>
 8006170:	230d      	movs	r3, #13
 8006172:	e0a2      	b.n	80062ba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	3330      	adds	r3, #48	; 0x30
 8006178:	332c      	adds	r3, #44	; 0x2c
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe fb7c 	bl	8004878 <ld_dword>
 8006180:	4602      	mov	r2, r0
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	647b      	str	r3, [r7, #68]	; 0x44
 800618e:	e01f      	b.n	80061d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	891b      	ldrh	r3, [r3, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <find_volume+0x364>
 8006198:	230d      	movs	r3, #13
 800619a:	e08e      	b.n	80062ba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	6a1a      	ldr	r2, [r3, #32]
 80061a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a2:	441a      	add	r2, r3
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80061a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d103      	bne.n	80061b8 <find_volume+0x380>
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	e00a      	b.n	80061ce <find_volume+0x396>
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	4613      	mov	r3, r2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	4413      	add	r3, r2
 80061c2:	085a      	lsrs	r2, r3, #1
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80061ce:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	699a      	ldr	r2, [r3, #24]
 80061d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80061da:	0a5b      	lsrs	r3, r3, #9
 80061dc:	429a      	cmp	r2, r3
 80061de:	d201      	bcs.n	80061e4 <find_volume+0x3ac>
 80061e0:	230d      	movs	r3, #13
 80061e2:	e06a      	b.n	80062ba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ea:	611a      	str	r2, [r3, #16]
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	2280      	movs	r2, #128	; 0x80
 80061f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80061fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d149      	bne.n	8006296 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	3330      	adds	r3, #48	; 0x30
 8006206:	3330      	adds	r3, #48	; 0x30
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe fb1d 	bl	8004848 <ld_word>
 800620e:	4603      	mov	r3, r0
 8006210:	2b01      	cmp	r3, #1
 8006212:	d140      	bne.n	8006296 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006216:	3301      	adds	r3, #1
 8006218:	4619      	mov	r1, r3
 800621a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800621c:	f7fe fdc4 	bl	8004da8 <move_window>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d137      	bne.n	8006296 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	2200      	movs	r2, #0
 800622a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	3330      	adds	r3, #48	; 0x30
 8006230:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fb07 	bl	8004848 <ld_word>
 800623a:	4603      	mov	r3, r0
 800623c:	461a      	mov	r2, r3
 800623e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006242:	429a      	cmp	r2, r3
 8006244:	d127      	bne.n	8006296 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	3330      	adds	r3, #48	; 0x30
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fb14 	bl	8004878 <ld_dword>
 8006250:	4603      	mov	r3, r0
 8006252:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <find_volume+0x48c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d11e      	bne.n	8006296 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	3330      	adds	r3, #48	; 0x30
 800625c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe fb09 	bl	8004878 <ld_dword>
 8006266:	4603      	mov	r3, r0
 8006268:	4a17      	ldr	r2, [pc, #92]	; (80062c8 <find_volume+0x490>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d113      	bne.n	8006296 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	3330      	adds	r3, #48	; 0x30
 8006272:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fafe 	bl	8004878 <ld_dword>
 800627c:	4602      	mov	r2, r0
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	3330      	adds	r3, #48	; 0x30
 8006286:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe faf4 	bl	8004878 <ld_dword>
 8006290:	4602      	mov	r2, r0
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800629c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800629e:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <find_volume+0x494>)
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <find_volume+0x494>)
 80062a8:	801a      	strh	r2, [r3, #0]
 80062aa:	4b08      	ldr	r3, [pc, #32]	; (80062cc <find_volume+0x494>)
 80062ac:	881a      	ldrh	r2, [r3, #0]
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80062b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062b4:	f7fe fd10 	bl	8004cd8 <clear_lock>
#endif
	return FR_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3758      	adds	r7, #88	; 0x58
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	41615252 	.word	0x41615252
 80062c8:	61417272 	.word	0x61417272
 80062cc:	2000066c 	.word	0x2000066c

080062d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80062da:	2309      	movs	r3, #9
 80062dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01c      	beq.n	800631e <validate+0x4e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d018      	beq.n	800631e <validate+0x4e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d013      	beq.n	800631e <validate+0x4e>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	889a      	ldrh	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	88db      	ldrh	r3, [r3, #6]
 8006300:	429a      	cmp	r2, r3
 8006302:	d10c      	bne.n	800631e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe f9fe 	bl	800470c <disk_status>
 8006310:	4603      	mov	r3, r0
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <validate+0x4e>
			res = FR_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d102      	bne.n	800632a <validate+0x5a>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	e000      	b.n	800632c <validate+0x5c>
 800632a:	2300      	movs	r3, #0
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	6013      	str	r3, [r2, #0]
	return res;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800634e:	f107 0310 	add.w	r3, r7, #16
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff fcd5 	bl	8005d02 <get_ldnumber>
 8006358:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	2b00      	cmp	r3, #0
 800635e:	da01      	bge.n	8006364 <f_mount+0x28>
 8006360:	230b      	movs	r3, #11
 8006362:	e02b      	b.n	80063bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006364:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <f_mount+0x88>)
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800636c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006374:	69b8      	ldr	r0, [r7, #24]
 8006376:	f7fe fcaf 	bl	8004cd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	490d      	ldr	r1, [pc, #52]	; (80063c4 <f_mount+0x88>)
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <f_mount+0x66>
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d001      	beq.n	80063a6 <f_mount+0x6a>
 80063a2:	2300      	movs	r3, #0
 80063a4:	e00a      	b.n	80063bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80063a6:	f107 010c 	add.w	r1, r7, #12
 80063aa:	f107 0308 	add.w	r3, r7, #8
 80063ae:	2200      	movs	r2, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fd41 	bl	8005e38 <find_volume>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000668 	.word	0x20000668

080063c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b098      	sub	sp, #96	; 0x60
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <f_open+0x18>
 80063dc:	2309      	movs	r3, #9
 80063de:	e1ad      	b.n	800673c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80063e8:	79fa      	ldrb	r2, [r7, #7]
 80063ea:	f107 0110 	add.w	r1, r7, #16
 80063ee:	f107 0308 	add.w	r3, r7, #8
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff fd20 	bl	8005e38 <find_volume>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80063fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 8191 	bne.w	800672a <f_open+0x362>
		dj.obj.fs = fs;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	f107 0314 	add.w	r3, r7, #20
 8006412:	4611      	mov	r1, r2
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fc03 	bl	8005c20 <follow_path>
 800641a:	4603      	mov	r3, r0
 800641c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11a      	bne.n	800645e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006428:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800642c:	b25b      	sxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	da03      	bge.n	800643a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006432:	2306      	movs	r3, #6
 8006434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006438:	e011      	b.n	800645e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	f023 0301 	bic.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	bf14      	ite	ne
 8006444:	2301      	movne	r3, #1
 8006446:	2300      	moveq	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	f107 0314 	add.w	r3, r7, #20
 8006450:	4611      	mov	r1, r2
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe faf8 	bl	8004a48 <chk_lock>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	f003 031c 	and.w	r3, r3, #28
 8006464:	2b00      	cmp	r3, #0
 8006466:	d07f      	beq.n	8006568 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800646c:	2b00      	cmp	r3, #0
 800646e:	d017      	beq.n	80064a0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006470:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006474:	2b04      	cmp	r3, #4
 8006476:	d10e      	bne.n	8006496 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006478:	f7fe fb42 	bl	8004b00 <enq_lock>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d006      	beq.n	8006490 <f_open+0xc8>
 8006482:	f107 0314 	add.w	r3, r7, #20
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff fa86 	bl	8005998 <dir_register>
 800648c:	4603      	mov	r3, r0
 800648e:	e000      	b.n	8006492 <f_open+0xca>
 8006490:	2312      	movs	r3, #18
 8006492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	f043 0308 	orr.w	r3, r3, #8
 800649c:	71fb      	strb	r3, [r7, #7]
 800649e:	e010      	b.n	80064c2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80064a0:	7ebb      	ldrb	r3, [r7, #26]
 80064a2:	f003 0311 	and.w	r3, r3, #17
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <f_open+0xea>
					res = FR_DENIED;
 80064aa:	2307      	movs	r3, #7
 80064ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80064b0:	e007      	b.n	80064c2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <f_open+0xfa>
 80064bc:	2308      	movs	r3, #8
 80064be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80064c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d168      	bne.n	800659c <f_open+0x1d4>
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d063      	beq.n	800659c <f_open+0x1d4>
				dw = GET_FATTIME();
 80064d4:	f7fd fef4 	bl	80042c0 <get_fattime>
 80064d8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	330e      	adds	r3, #14
 80064de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe fa07 	bl	80048f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80064e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e8:	3316      	adds	r3, #22
 80064ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fe fa01 	bl	80048f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	330b      	adds	r3, #11
 80064f6:	2220      	movs	r2, #32
 80064f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064fe:	4611      	mov	r1, r2
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff f958 	bl	80057b6 <ld_clust>
 8006506:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800650c:	2200      	movs	r2, #0
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff f970 	bl	80057f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	331c      	adds	r3, #28
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe f9ea 	bl	80048f4 <st_dword>
					fs->wflag = 1;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2201      	movs	r2, #1
 8006524:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d037      	beq.n	800659c <f_open+0x1d4>
						dw = fs->winsect;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006532:	f107 0314 	add.w	r3, r7, #20
 8006536:	2200      	movs	r2, #0
 8006538:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe fe83 	bl	8005246 <remove_chain>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800654a:	2b00      	cmp	r3, #0
 800654c:	d126      	bne.n	800659c <f_open+0x1d4>
							res = move_window(fs, dw);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fc28 	bl	8004da8 <move_window>
 8006558:	4603      	mov	r3, r0
 800655a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006562:	3a01      	subs	r2, #1
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	e019      	b.n	800659c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800656c:	2b00      	cmp	r3, #0
 800656e:	d115      	bne.n	800659c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006570:	7ebb      	ldrb	r3, [r7, #26]
 8006572:	f003 0310 	and.w	r3, r3, #16
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <f_open+0x1ba>
					res = FR_NO_FILE;
 800657a:	2304      	movs	r3, #4
 800657c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006580:	e00c      	b.n	800659c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <f_open+0x1d4>
 800658c:	7ebb      	ldrb	r3, [r7, #26]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <f_open+0x1d4>
						res = FR_DENIED;
 8006596:	2307      	movs	r3, #7
 8006598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800659c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d128      	bne.n	80065f6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80065be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	f023 0301 	bic.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf14      	ite	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	2300      	moveq	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	f107 0314 	add.w	r3, r7, #20
 80065da:	4611      	mov	r1, r2
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fe fab1 	bl	8004b44 <inc_lock>
 80065e2:	4602      	mov	r2, r0
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <f_open+0x22e>
 80065f0:	2302      	movs	r3, #2
 80065f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80065f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f040 8095 	bne.w	800672a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff f8d5 	bl	80057b6 <ld_clust>
 800660c:	4602      	mov	r2, r0
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	331c      	adds	r3, #28
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe f92e 	bl	8004878 <ld_dword>
 800661c:	4602      	mov	r2, r0
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	88da      	ldrh	r2, [r3, #6]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	79fa      	ldrb	r2, [r7, #7]
 800663a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3330      	adds	r3, #48	; 0x30
 8006652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006656:	2100      	movs	r1, #0
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe f998 	bl	800498e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d060      	beq.n	800672a <f_open+0x362>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d05c      	beq.n	800672a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	895b      	ldrh	r3, [r3, #10]
 800667c:	025b      	lsls	r3, r3, #9
 800667e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	657b      	str	r3, [r7, #84]	; 0x54
 800668c:	e016      	b.n	80066bc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe fc43 	bl	8004f1e <get_fat>
 8006698:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800669a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800669c:	2b01      	cmp	r3, #1
 800669e:	d802      	bhi.n	80066a6 <f_open+0x2de>
 80066a0:	2302      	movs	r3, #2
 80066a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80066a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d102      	bne.n	80066b4 <f_open+0x2ec>
 80066ae:	2301      	movs	r3, #1
 80066b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80066b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	657b      	str	r3, [r7, #84]	; 0x54
 80066bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d103      	bne.n	80066cc <f_open+0x304>
 80066c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d8e0      	bhi.n	800668e <f_open+0x2c6>
				}
				fp->clust = clst;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80066d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d127      	bne.n	800672a <f_open+0x362>
 80066da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d022      	beq.n	800672a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe fbf9 	bl	8004ee0 <clust2sect>
 80066ee:	6478      	str	r0, [r7, #68]	; 0x44
 80066f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d103      	bne.n	80066fe <f_open+0x336>
						res = FR_INT_ERR;
 80066f6:	2302      	movs	r3, #2
 80066f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80066fc:	e015      	b.n	800672a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80066fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006700:	0a5a      	lsrs	r2, r3, #9
 8006702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006704:	441a      	add	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	7858      	ldrb	r0, [r3, #1]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a1a      	ldr	r2, [r3, #32]
 8006718:	2301      	movs	r3, #1
 800671a:	f7fe f837 	bl	800478c <disk_read>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <f_open+0x362>
 8006724:	2301      	movs	r3, #1
 8006726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800672a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <f_open+0x370>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006738:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800673c:	4618      	mov	r0, r3
 800673e:	3760      	adds	r7, #96	; 0x60
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08c      	sub	sp, #48	; 0x30
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f107 0210 	add.w	r2, r7, #16
 8006762:	4611      	mov	r1, r2
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fdb3 	bl	80062d0 <validate>
 800676a:	4603      	mov	r3, r0
 800676c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006774:	2b00      	cmp	r3, #0
 8006776:	d107      	bne.n	8006788 <f_write+0x44>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	7d5b      	ldrb	r3, [r3, #21]
 800677c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <f_write+0x4a>
 8006788:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800678c:	e14b      	b.n	8006a26 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	7d1b      	ldrb	r3, [r3, #20]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <f_write+0x5a>
 800679a:	2307      	movs	r3, #7
 800679c:	e143      	b.n	8006a26 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	f080 812d 	bcs.w	8006a0a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	43db      	mvns	r3, r3
 80067b6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80067b8:	e127      	b.n	8006a0a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f040 80e3 	bne.w	800698e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	0a5b      	lsrs	r3, r3, #9
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	8952      	ldrh	r2, [r2, #10]
 80067d2:	3a01      	subs	r2, #1
 80067d4:	4013      	ands	r3, r2
 80067d6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d143      	bne.n	8006866 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10c      	bne.n	8006800 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d11a      	bne.n	8006828 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe fd8a 	bl	8005310 <create_chain>
 80067fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80067fe:	e013      	b.n	8006828 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4619      	mov	r1, r3
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7fe fe16 	bl	8005440 <clmt_clust>
 8006814:	62b8      	str	r0, [r7, #40]	; 0x28
 8006816:	e007      	b.n	8006828 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f7fe fd75 	bl	8005310 <create_chain>
 8006826:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 80f2 	beq.w	8006a14 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	2b01      	cmp	r3, #1
 8006834:	d104      	bne.n	8006840 <f_write+0xfc>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2202      	movs	r2, #2
 800683a:	755a      	strb	r2, [r3, #21]
 800683c:	2302      	movs	r3, #2
 800683e:	e0f2      	b.n	8006a26 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d104      	bne.n	8006852 <f_write+0x10e>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	755a      	strb	r2, [r3, #21]
 800684e:	2301      	movs	r3, #1
 8006850:	e0e9      	b.n	8006a26 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006856:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d102      	bne.n	8006866 <f_write+0x122>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006864:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	7d1b      	ldrb	r3, [r3, #20]
 800686a:	b25b      	sxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	da18      	bge.n	80068a2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	7858      	ldrb	r0, [r3, #1]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a1a      	ldr	r2, [r3, #32]
 800687e:	2301      	movs	r3, #1
 8006880:	f7fd ffa4 	bl	80047cc <disk_write>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d004      	beq.n	8006894 <f_write+0x150>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	755a      	strb	r2, [r3, #21]
 8006890:	2301      	movs	r3, #1
 8006892:	e0c8      	b.n	8006a26 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	7d1b      	ldrb	r3, [r3, #20]
 8006898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f7fe fb18 	bl	8004ee0 <clust2sect>
 80068b0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <f_write+0x17e>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2202      	movs	r2, #2
 80068bc:	755a      	strb	r2, [r3, #21]
 80068be:	2302      	movs	r3, #2
 80068c0:	e0b1      	b.n	8006a26 <f_write+0x2e2>
			sect += csect;
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	4413      	add	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	0a5b      	lsrs	r3, r3, #9
 80068ce:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d03c      	beq.n	8006950 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	4413      	add	r3, r2
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	8952      	ldrh	r2, [r2, #10]
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d905      	bls.n	80068f0 <f_write+0x1ac>
					cc = fs->csize - csect;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	895b      	ldrh	r3, [r3, #10]
 80068e8:	461a      	mov	r2, r3
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	7858      	ldrb	r0, [r3, #1]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	69f9      	ldr	r1, [r7, #28]
 80068fa:	f7fd ff67 	bl	80047cc <disk_write>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <f_write+0x1ca>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	755a      	strb	r2, [r3, #21]
 800690a:	2301      	movs	r3, #1
 800690c:	e08b      	b.n	8006a26 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1a      	ldr	r2, [r3, #32]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	6a3a      	ldr	r2, [r7, #32]
 8006918:	429a      	cmp	r2, r3
 800691a:	d915      	bls.n	8006948 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	025b      	lsls	r3, r3, #9
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006934:	4619      	mov	r1, r3
 8006936:	f7fe f809 	bl	800494c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	7d1b      	ldrb	r3, [r3, #20]
 800693e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006942:	b2da      	uxtb	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	025b      	lsls	r3, r3, #9
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800694e:	e03f      	b.n	80069d0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	429a      	cmp	r2, r3
 8006958:	d016      	beq.n	8006988 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006962:	429a      	cmp	r2, r3
 8006964:	d210      	bcs.n	8006988 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	7858      	ldrb	r0, [r3, #1]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006970:	2301      	movs	r3, #1
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	f7fd ff0a 	bl	800478c <disk_read>
 8006978:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	755a      	strb	r2, [r3, #21]
 8006984:	2301      	movs	r3, #1
 8006986:	e04e      	b.n	8006a26 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006996:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800699c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d901      	bls.n	80069a8 <f_write+0x264>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b6:	4413      	add	r3, r2
 80069b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ba:	69f9      	ldr	r1, [r7, #28]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fd ffc5 	bl	800494c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	7d1b      	ldrb	r3, [r3, #20]
 80069c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	4413      	add	r3, r2
 80069d6:	61fb      	str	r3, [r7, #28]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	441a      	add	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	619a      	str	r2, [r3, #24]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	bf38      	it	cc
 80069f0:	461a      	movcc	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	60da      	str	r2, [r3, #12]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	441a      	add	r2, r3
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f47f aed4 	bne.w	80067ba <f_write+0x76>
 8006a12:	e000      	b.n	8006a16 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006a14:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	7d1b      	ldrb	r3, [r3, #20]
 8006a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3730      	adds	r7, #48	; 0x30
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b086      	sub	sp, #24
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f107 0208 	add.w	r2, r7, #8
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff fc46 	bl	80062d0 <validate>
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d168      	bne.n	8006b20 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	7d1b      	ldrb	r3, [r3, #20]
 8006a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d062      	beq.n	8006b20 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	7d1b      	ldrb	r3, [r3, #20]
 8006a5e:	b25b      	sxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	da15      	bge.n	8006a90 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	7858      	ldrb	r0, [r3, #1]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1a      	ldr	r2, [r3, #32]
 8006a72:	2301      	movs	r3, #1
 8006a74:	f7fd feaa 	bl	80047cc <disk_write>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <f_sync+0x54>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e04f      	b.n	8006b22 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	7d1b      	ldrb	r3, [r3, #20]
 8006a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006a90:	f7fd fc16 	bl	80042c0 <get_fattime>
 8006a94:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	f7fe f982 	bl	8004da8 <move_window>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d138      	bne.n	8006b20 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	330b      	adds	r3, #11
 8006ab8:	781a      	ldrb	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	330b      	adds	r3, #11
 8006abe:	f042 0220 	orr.w	r2, r2, #32
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	68f9      	ldr	r1, [r7, #12]
 8006ad2:	f7fe fe8f 	bl	80057f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f103 021c 	add.w	r2, r3, #28
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f7fd ff06 	bl	80048f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3316      	adds	r3, #22
 8006aec:	6939      	ldr	r1, [r7, #16]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fd ff00 	bl	80048f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3312      	adds	r3, #18
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fd fedf 	bl	80048be <st_word>
					fs->wflag = 1;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2201      	movs	r2, #1
 8006b04:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe f97b 	bl	8004e04 <sync_fs>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	7d1b      	ldrb	r3, [r3, #20]
 8006b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff ff7b 	bl	8006a2e <f_sync>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d118      	bne.n	8006b74 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f107 0208 	add.w	r2, r7, #8
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7ff fbc0 	bl	80062d0 <validate>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10c      	bne.n	8006b74 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe f87e 	bl	8004c60 <dec_lock>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <f_opendir+0x14>
 8006b8e:	2309      	movs	r3, #9
 8006b90:	e064      	b.n	8006c5c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8006b96:	f107 010c 	add.w	r1, r7, #12
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff f94a 	bl	8005e38 <find_volume>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d14f      	bne.n	8006c4e <f_opendir+0xd0>
		obj->fs = fs;
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff f831 	bl	8005c20 <follow_path>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d13d      	bne.n	8006c44 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bce:	b25b      	sxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	db12      	blt.n	8006bfa <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	799b      	ldrb	r3, [r3, #6]
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f7fe fde4 	bl	80057b6 <ld_clust>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	609a      	str	r2, [r3, #8]
 8006bf4:	e001      	b.n	8006bfa <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8006bf6:	2305      	movs	r3, #5
 8006bf8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d121      	bne.n	8006c44 <f_opendir+0xc6>
				obj->id = fs->id;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	88da      	ldrh	r2, [r3, #6]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006c08:	2100      	movs	r1, #0
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fe fc4c 	bl	80054a8 <dir_sdi>
 8006c10:	4603      	mov	r3, r0
 8006c12:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d114      	bne.n	8006c44 <f_opendir+0xc6>
					if (obj->sclust) {
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00d      	beq.n	8006c3e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8006c22:	2100      	movs	r1, #0
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7fd ff8d 	bl	8004b44 <inc_lock>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d105      	bne.n	8006c44 <f_opendir+0xc6>
 8006c38:	2312      	movs	r3, #18
 8006c3a:	75fb      	strb	r3, [r7, #23]
 8006c3c:	e002      	b.n	8006c44 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2200      	movs	r2, #0
 8006c42:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d101      	bne.n	8006c4e <f_opendir+0xd0>
 8006c4a:	2305      	movs	r3, #5
 8006c4c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <f_opendir+0xdc>
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f107 0208 	add.w	r2, r7, #8
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff fb2b 	bl	80062d0 <validate>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d110      	bne.n	8006ca6 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d006      	beq.n	8006c9a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fd ffe5 	bl	8004c60 <dec_lock>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d102      	bne.n	8006ca6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f107 0208 	add.w	r2, r7, #8
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fb04 	bl	80062d0 <validate>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d126      	bne.n	8006d20 <f_readdir+0x70>
		if (!fno) {
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7fe fbe4 	bl	80054a8 <dir_sdi>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73fb      	strb	r3, [r7, #15]
 8006ce4:	e01c      	b.n	8006d20 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7fe fda3 	bl	8005834 <dir_read>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d101      	bne.n	8006cfc <f_readdir+0x4c>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10e      	bne.n	8006d20 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fe fe97 	bl	8005a38 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7fe fc46 	bl	800559e <dir_next>
 8006d12:	4603      	mov	r3, r0
 8006d14:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d101      	bne.n	8006d20 <f_readdir+0x70>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b090      	sub	sp, #64	; 0x40
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8006d34:	f107 010c 	add.w	r1, r7, #12
 8006d38:	1d3b      	adds	r3, r7, #4
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff f87b 	bl	8005e38 <find_volume>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8006d48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11f      	bne.n	8006d90 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	f107 030c 	add.w	r3, r7, #12
 8006d56:	4611      	mov	r1, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe ff61 	bl	8005c20 <follow_path>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8006d64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d111      	bne.n	8006d90 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8006d6c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d70:	b25b      	sxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da03      	bge.n	8006d7e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8006d76:	2306      	movs	r3, #6
 8006d78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006d7c:	e008      	b.n	8006d90 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <f_stat+0x66>
 8006d84:	f107 030c 	add.w	r3, r7, #12
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe fe54 	bl	8005a38 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8006d90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3740      	adds	r7, #64	; 0x40
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b09e      	sub	sp, #120	; 0x78
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8006da8:	f107 010c 	add.w	r1, r7, #12
 8006dac:	1d3b      	adds	r3, r7, #4
 8006dae:	2202      	movs	r2, #2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff f841 	bl	8005e38 <find_volume>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8006dc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 808e 	bne.w	8006ee6 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe ff24 	bl	8005c20 <follow_path>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8006dde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d108      	bne.n	8006df8 <f_unlink+0x5c>
 8006de6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006dea:	2102      	movs	r1, #2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fd fe2b 	bl	8004a48 <chk_lock>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006df8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d172      	bne.n	8006ee6 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8006e00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e04:	b25b      	sxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da03      	bge.n	8006e12 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8006e0a:	2306      	movs	r3, #6
 8006e0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006e10:	e008      	b.n	8006e24 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8006e12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8006e1e:	2307      	movs	r3, #7
 8006e20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8006e24:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d134      	bne.n	8006e96 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e30:	4611      	mov	r1, r2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fcbf 	bl	80057b6 <ld_clust>
 8006e38:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8006e3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e3e:	f003 0310 	and.w	r3, r3, #16
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d027      	beq.n	8006e96 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8006e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e4c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8006e4e:	f107 0310 	add.w	r3, r7, #16
 8006e52:	2100      	movs	r1, #0
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe fb27 	bl	80054a8 <dir_sdi>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8006e60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d116      	bne.n	8006e96 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8006e68:	f107 0310 	add.w	r3, r7, #16
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe fce0 	bl	8005834 <dir_read>
 8006e74:	4603      	mov	r3, r0
 8006e76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8006e7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d102      	bne.n	8006e88 <f_unlink+0xec>
 8006e82:	2307      	movs	r3, #7
 8006e84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8006e88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d102      	bne.n	8006e96 <f_unlink+0xfa>
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8006e96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d123      	bne.n	8006ee6 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8006e9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fe fdaa 	bl	80059fc <dir_remove>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8006eae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10c      	bne.n	8006ed0 <f_unlink+0x134>
 8006eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d009      	beq.n	8006ed0 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8006ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe f9be 	bl	8005246 <remove_chain>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8006ed0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <f_unlink+0x14a>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fd ff92 	bl	8004e04 <sync_fs>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8006ee6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3778      	adds	r7, #120	; 0x78
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f02:	2301      	movs	r3, #1
 8006f04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006f0a:	4b1f      	ldr	r3, [pc, #124]	; (8006f88 <FATFS_LinkDriverEx+0x94>)
 8006f0c:	7a5b      	ldrb	r3, [r3, #9]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d131      	bne.n	8006f78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f14:	4b1c      	ldr	r3, [pc, #112]	; (8006f88 <FATFS_LinkDriverEx+0x94>)
 8006f16:	7a5b      	ldrb	r3, [r3, #9]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	4b1a      	ldr	r3, [pc, #104]	; (8006f88 <FATFS_LinkDriverEx+0x94>)
 8006f1e:	2100      	movs	r1, #0
 8006f20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006f22:	4b19      	ldr	r3, [pc, #100]	; (8006f88 <FATFS_LinkDriverEx+0x94>)
 8006f24:	7a5b      	ldrb	r3, [r3, #9]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	4a17      	ldr	r2, [pc, #92]	; (8006f88 <FATFS_LinkDriverEx+0x94>)
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <FATFS_LinkDriverEx+0x94>)
 8006f34:	7a5b      	ldrb	r3, [r3, #9]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <FATFS_LinkDriverEx+0x94>)
 8006f3c:	4413      	add	r3, r2
 8006f3e:	79fa      	ldrb	r2, [r7, #7]
 8006f40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f42:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <FATFS_LinkDriverEx+0x94>)
 8006f44:	7a5b      	ldrb	r3, [r3, #9]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	b2d1      	uxtb	r1, r2
 8006f4c:	4a0e      	ldr	r2, [pc, #56]	; (8006f88 <FATFS_LinkDriverEx+0x94>)
 8006f4e:	7251      	strb	r1, [r2, #9]
 8006f50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f52:	7dbb      	ldrb	r3, [r7, #22]
 8006f54:	3330      	adds	r3, #48	; 0x30
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	223a      	movs	r2, #58	; 0x3a
 8006f62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	3302      	adds	r3, #2
 8006f68:	222f      	movs	r2, #47	; 0x2f
 8006f6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	3303      	adds	r3, #3
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000690 	.word	0x20000690

08006f8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006f96:	2200      	movs	r2, #0
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff ffaa 	bl	8006ef4 <FATFS_LinkDriverEx>
 8006fa0:	4603      	mov	r3, r0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <__errno>:
 8006fac:	4b01      	ldr	r3, [pc, #4]	; (8006fb4 <__errno+0x8>)
 8006fae:	6818      	ldr	r0, [r3, #0]
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	2000000c 	.word	0x2000000c

08006fb8 <__libc_init_array>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	4d0d      	ldr	r5, [pc, #52]	; (8006ff0 <__libc_init_array+0x38>)
 8006fbc:	4c0d      	ldr	r4, [pc, #52]	; (8006ff4 <__libc_init_array+0x3c>)
 8006fbe:	1b64      	subs	r4, r4, r5
 8006fc0:	10a4      	asrs	r4, r4, #2
 8006fc2:	2600      	movs	r6, #0
 8006fc4:	42a6      	cmp	r6, r4
 8006fc6:	d109      	bne.n	8006fdc <__libc_init_array+0x24>
 8006fc8:	4d0b      	ldr	r5, [pc, #44]	; (8006ff8 <__libc_init_array+0x40>)
 8006fca:	4c0c      	ldr	r4, [pc, #48]	; (8006ffc <__libc_init_array+0x44>)
 8006fcc:	f000 fc9e 	bl	800790c <_init>
 8006fd0:	1b64      	subs	r4, r4, r5
 8006fd2:	10a4      	asrs	r4, r4, #2
 8006fd4:	2600      	movs	r6, #0
 8006fd6:	42a6      	cmp	r6, r4
 8006fd8:	d105      	bne.n	8006fe6 <__libc_init_array+0x2e>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe0:	4798      	blx	r3
 8006fe2:	3601      	adds	r6, #1
 8006fe4:	e7ee      	b.n	8006fc4 <__libc_init_array+0xc>
 8006fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fea:	4798      	blx	r3
 8006fec:	3601      	adds	r6, #1
 8006fee:	e7f2      	b.n	8006fd6 <__libc_init_array+0x1e>
 8006ff0:	08007e94 	.word	0x08007e94
 8006ff4:	08007e94 	.word	0x08007e94
 8006ff8:	08007e94 	.word	0x08007e94
 8006ffc:	08007e98 	.word	0x08007e98

08007000 <malloc>:
 8007000:	4b02      	ldr	r3, [pc, #8]	; (800700c <malloc+0xc>)
 8007002:	4601      	mov	r1, r0
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	f000 b87f 	b.w	8007108 <_malloc_r>
 800700a:	bf00      	nop
 800700c:	2000000c 	.word	0x2000000c

08007010 <free>:
 8007010:	4b02      	ldr	r3, [pc, #8]	; (800701c <free+0xc>)
 8007012:	4601      	mov	r1, r0
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	f000 b80b 	b.w	8007030 <_free_r>
 800701a:	bf00      	nop
 800701c:	2000000c 	.word	0x2000000c

08007020 <memset>:
 8007020:	4402      	add	r2, r0
 8007022:	4603      	mov	r3, r0
 8007024:	4293      	cmp	r3, r2
 8007026:	d100      	bne.n	800702a <memset+0xa>
 8007028:	4770      	bx	lr
 800702a:	f803 1b01 	strb.w	r1, [r3], #1
 800702e:	e7f9      	b.n	8007024 <memset+0x4>

08007030 <_free_r>:
 8007030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007032:	2900      	cmp	r1, #0
 8007034:	d044      	beq.n	80070c0 <_free_r+0x90>
 8007036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800703a:	9001      	str	r0, [sp, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f1a1 0404 	sub.w	r4, r1, #4
 8007042:	bfb8      	it	lt
 8007044:	18e4      	addlt	r4, r4, r3
 8007046:	f000 f903 	bl	8007250 <__malloc_lock>
 800704a:	4a1e      	ldr	r2, [pc, #120]	; (80070c4 <_free_r+0x94>)
 800704c:	9801      	ldr	r0, [sp, #4]
 800704e:	6813      	ldr	r3, [r2, #0]
 8007050:	b933      	cbnz	r3, 8007060 <_free_r+0x30>
 8007052:	6063      	str	r3, [r4, #4]
 8007054:	6014      	str	r4, [r2, #0]
 8007056:	b003      	add	sp, #12
 8007058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800705c:	f000 b8fe 	b.w	800725c <__malloc_unlock>
 8007060:	42a3      	cmp	r3, r4
 8007062:	d908      	bls.n	8007076 <_free_r+0x46>
 8007064:	6825      	ldr	r5, [r4, #0]
 8007066:	1961      	adds	r1, r4, r5
 8007068:	428b      	cmp	r3, r1
 800706a:	bf01      	itttt	eq
 800706c:	6819      	ldreq	r1, [r3, #0]
 800706e:	685b      	ldreq	r3, [r3, #4]
 8007070:	1949      	addeq	r1, r1, r5
 8007072:	6021      	streq	r1, [r4, #0]
 8007074:	e7ed      	b.n	8007052 <_free_r+0x22>
 8007076:	461a      	mov	r2, r3
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	b10b      	cbz	r3, 8007080 <_free_r+0x50>
 800707c:	42a3      	cmp	r3, r4
 800707e:	d9fa      	bls.n	8007076 <_free_r+0x46>
 8007080:	6811      	ldr	r1, [r2, #0]
 8007082:	1855      	adds	r5, r2, r1
 8007084:	42a5      	cmp	r5, r4
 8007086:	d10b      	bne.n	80070a0 <_free_r+0x70>
 8007088:	6824      	ldr	r4, [r4, #0]
 800708a:	4421      	add	r1, r4
 800708c:	1854      	adds	r4, r2, r1
 800708e:	42a3      	cmp	r3, r4
 8007090:	6011      	str	r1, [r2, #0]
 8007092:	d1e0      	bne.n	8007056 <_free_r+0x26>
 8007094:	681c      	ldr	r4, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	6053      	str	r3, [r2, #4]
 800709a:	4421      	add	r1, r4
 800709c:	6011      	str	r1, [r2, #0]
 800709e:	e7da      	b.n	8007056 <_free_r+0x26>
 80070a0:	d902      	bls.n	80070a8 <_free_r+0x78>
 80070a2:	230c      	movs	r3, #12
 80070a4:	6003      	str	r3, [r0, #0]
 80070a6:	e7d6      	b.n	8007056 <_free_r+0x26>
 80070a8:	6825      	ldr	r5, [r4, #0]
 80070aa:	1961      	adds	r1, r4, r5
 80070ac:	428b      	cmp	r3, r1
 80070ae:	bf04      	itt	eq
 80070b0:	6819      	ldreq	r1, [r3, #0]
 80070b2:	685b      	ldreq	r3, [r3, #4]
 80070b4:	6063      	str	r3, [r4, #4]
 80070b6:	bf04      	itt	eq
 80070b8:	1949      	addeq	r1, r1, r5
 80070ba:	6021      	streq	r1, [r4, #0]
 80070bc:	6054      	str	r4, [r2, #4]
 80070be:	e7ca      	b.n	8007056 <_free_r+0x26>
 80070c0:	b003      	add	sp, #12
 80070c2:	bd30      	pop	{r4, r5, pc}
 80070c4:	2000069c 	.word	0x2000069c

080070c8 <sbrk_aligned>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4e0e      	ldr	r6, [pc, #56]	; (8007104 <sbrk_aligned+0x3c>)
 80070cc:	460c      	mov	r4, r1
 80070ce:	6831      	ldr	r1, [r6, #0]
 80070d0:	4605      	mov	r5, r0
 80070d2:	b911      	cbnz	r1, 80070da <sbrk_aligned+0x12>
 80070d4:	f000 f88c 	bl	80071f0 <_sbrk_r>
 80070d8:	6030      	str	r0, [r6, #0]
 80070da:	4621      	mov	r1, r4
 80070dc:	4628      	mov	r0, r5
 80070de:	f000 f887 	bl	80071f0 <_sbrk_r>
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	d00a      	beq.n	80070fc <sbrk_aligned+0x34>
 80070e6:	1cc4      	adds	r4, r0, #3
 80070e8:	f024 0403 	bic.w	r4, r4, #3
 80070ec:	42a0      	cmp	r0, r4
 80070ee:	d007      	beq.n	8007100 <sbrk_aligned+0x38>
 80070f0:	1a21      	subs	r1, r4, r0
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 f87c 	bl	80071f0 <_sbrk_r>
 80070f8:	3001      	adds	r0, #1
 80070fa:	d101      	bne.n	8007100 <sbrk_aligned+0x38>
 80070fc:	f04f 34ff 	mov.w	r4, #4294967295
 8007100:	4620      	mov	r0, r4
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	200006a0 	.word	0x200006a0

08007108 <_malloc_r>:
 8007108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710c:	1ccd      	adds	r5, r1, #3
 800710e:	f025 0503 	bic.w	r5, r5, #3
 8007112:	3508      	adds	r5, #8
 8007114:	2d0c      	cmp	r5, #12
 8007116:	bf38      	it	cc
 8007118:	250c      	movcc	r5, #12
 800711a:	2d00      	cmp	r5, #0
 800711c:	4607      	mov	r7, r0
 800711e:	db01      	blt.n	8007124 <_malloc_r+0x1c>
 8007120:	42a9      	cmp	r1, r5
 8007122:	d905      	bls.n	8007130 <_malloc_r+0x28>
 8007124:	230c      	movs	r3, #12
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	2600      	movs	r6, #0
 800712a:	4630      	mov	r0, r6
 800712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007130:	4e2e      	ldr	r6, [pc, #184]	; (80071ec <_malloc_r+0xe4>)
 8007132:	f000 f88d 	bl	8007250 <__malloc_lock>
 8007136:	6833      	ldr	r3, [r6, #0]
 8007138:	461c      	mov	r4, r3
 800713a:	bb34      	cbnz	r4, 800718a <_malloc_r+0x82>
 800713c:	4629      	mov	r1, r5
 800713e:	4638      	mov	r0, r7
 8007140:	f7ff ffc2 	bl	80070c8 <sbrk_aligned>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	4604      	mov	r4, r0
 8007148:	d14d      	bne.n	80071e6 <_malloc_r+0xde>
 800714a:	6834      	ldr	r4, [r6, #0]
 800714c:	4626      	mov	r6, r4
 800714e:	2e00      	cmp	r6, #0
 8007150:	d140      	bne.n	80071d4 <_malloc_r+0xcc>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	4631      	mov	r1, r6
 8007156:	4638      	mov	r0, r7
 8007158:	eb04 0803 	add.w	r8, r4, r3
 800715c:	f000 f848 	bl	80071f0 <_sbrk_r>
 8007160:	4580      	cmp	r8, r0
 8007162:	d13a      	bne.n	80071da <_malloc_r+0xd2>
 8007164:	6821      	ldr	r1, [r4, #0]
 8007166:	3503      	adds	r5, #3
 8007168:	1a6d      	subs	r5, r5, r1
 800716a:	f025 0503 	bic.w	r5, r5, #3
 800716e:	3508      	adds	r5, #8
 8007170:	2d0c      	cmp	r5, #12
 8007172:	bf38      	it	cc
 8007174:	250c      	movcc	r5, #12
 8007176:	4629      	mov	r1, r5
 8007178:	4638      	mov	r0, r7
 800717a:	f7ff ffa5 	bl	80070c8 <sbrk_aligned>
 800717e:	3001      	adds	r0, #1
 8007180:	d02b      	beq.n	80071da <_malloc_r+0xd2>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	442b      	add	r3, r5
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	e00e      	b.n	80071a8 <_malloc_r+0xa0>
 800718a:	6822      	ldr	r2, [r4, #0]
 800718c:	1b52      	subs	r2, r2, r5
 800718e:	d41e      	bmi.n	80071ce <_malloc_r+0xc6>
 8007190:	2a0b      	cmp	r2, #11
 8007192:	d916      	bls.n	80071c2 <_malloc_r+0xba>
 8007194:	1961      	adds	r1, r4, r5
 8007196:	42a3      	cmp	r3, r4
 8007198:	6025      	str	r5, [r4, #0]
 800719a:	bf18      	it	ne
 800719c:	6059      	strne	r1, [r3, #4]
 800719e:	6863      	ldr	r3, [r4, #4]
 80071a0:	bf08      	it	eq
 80071a2:	6031      	streq	r1, [r6, #0]
 80071a4:	5162      	str	r2, [r4, r5]
 80071a6:	604b      	str	r3, [r1, #4]
 80071a8:	4638      	mov	r0, r7
 80071aa:	f104 060b 	add.w	r6, r4, #11
 80071ae:	f000 f855 	bl	800725c <__malloc_unlock>
 80071b2:	f026 0607 	bic.w	r6, r6, #7
 80071b6:	1d23      	adds	r3, r4, #4
 80071b8:	1af2      	subs	r2, r6, r3
 80071ba:	d0b6      	beq.n	800712a <_malloc_r+0x22>
 80071bc:	1b9b      	subs	r3, r3, r6
 80071be:	50a3      	str	r3, [r4, r2]
 80071c0:	e7b3      	b.n	800712a <_malloc_r+0x22>
 80071c2:	6862      	ldr	r2, [r4, #4]
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	bf0c      	ite	eq
 80071c8:	6032      	streq	r2, [r6, #0]
 80071ca:	605a      	strne	r2, [r3, #4]
 80071cc:	e7ec      	b.n	80071a8 <_malloc_r+0xa0>
 80071ce:	4623      	mov	r3, r4
 80071d0:	6864      	ldr	r4, [r4, #4]
 80071d2:	e7b2      	b.n	800713a <_malloc_r+0x32>
 80071d4:	4634      	mov	r4, r6
 80071d6:	6876      	ldr	r6, [r6, #4]
 80071d8:	e7b9      	b.n	800714e <_malloc_r+0x46>
 80071da:	230c      	movs	r3, #12
 80071dc:	603b      	str	r3, [r7, #0]
 80071de:	4638      	mov	r0, r7
 80071e0:	f000 f83c 	bl	800725c <__malloc_unlock>
 80071e4:	e7a1      	b.n	800712a <_malloc_r+0x22>
 80071e6:	6025      	str	r5, [r4, #0]
 80071e8:	e7de      	b.n	80071a8 <_malloc_r+0xa0>
 80071ea:	bf00      	nop
 80071ec:	2000069c 	.word	0x2000069c

080071f0 <_sbrk_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d06      	ldr	r5, [pc, #24]	; (800720c <_sbrk_r+0x1c>)
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	602b      	str	r3, [r5, #0]
 80071fc:	f7f9 fe74 	bl	8000ee8 <_sbrk>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d102      	bne.n	800720a <_sbrk_r+0x1a>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	b103      	cbz	r3, 800720a <_sbrk_r+0x1a>
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	200006a4 	.word	0x200006a4

08007210 <siprintf>:
 8007210:	b40e      	push	{r1, r2, r3}
 8007212:	b500      	push	{lr}
 8007214:	b09c      	sub	sp, #112	; 0x70
 8007216:	ab1d      	add	r3, sp, #116	; 0x74
 8007218:	9002      	str	r0, [sp, #8]
 800721a:	9006      	str	r0, [sp, #24]
 800721c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007220:	4809      	ldr	r0, [pc, #36]	; (8007248 <siprintf+0x38>)
 8007222:	9107      	str	r1, [sp, #28]
 8007224:	9104      	str	r1, [sp, #16]
 8007226:	4909      	ldr	r1, [pc, #36]	; (800724c <siprintf+0x3c>)
 8007228:	f853 2b04 	ldr.w	r2, [r3], #4
 800722c:	9105      	str	r1, [sp, #20]
 800722e:	6800      	ldr	r0, [r0, #0]
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	a902      	add	r1, sp, #8
 8007234:	f000 f874 	bl	8007320 <_svfiprintf_r>
 8007238:	9b02      	ldr	r3, [sp, #8]
 800723a:	2200      	movs	r2, #0
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	b01c      	add	sp, #112	; 0x70
 8007240:	f85d eb04 	ldr.w	lr, [sp], #4
 8007244:	b003      	add	sp, #12
 8007246:	4770      	bx	lr
 8007248:	2000000c 	.word	0x2000000c
 800724c:	ffff0208 	.word	0xffff0208

08007250 <__malloc_lock>:
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <__malloc_lock+0x8>)
 8007252:	f000 baf9 	b.w	8007848 <__retarget_lock_acquire_recursive>
 8007256:	bf00      	nop
 8007258:	200006a8 	.word	0x200006a8

0800725c <__malloc_unlock>:
 800725c:	4801      	ldr	r0, [pc, #4]	; (8007264 <__malloc_unlock+0x8>)
 800725e:	f000 baf4 	b.w	800784a <__retarget_lock_release_recursive>
 8007262:	bf00      	nop
 8007264:	200006a8 	.word	0x200006a8

08007268 <__ssputs_r>:
 8007268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	688e      	ldr	r6, [r1, #8]
 800726e:	429e      	cmp	r6, r3
 8007270:	4682      	mov	sl, r0
 8007272:	460c      	mov	r4, r1
 8007274:	4690      	mov	r8, r2
 8007276:	461f      	mov	r7, r3
 8007278:	d838      	bhi.n	80072ec <__ssputs_r+0x84>
 800727a:	898a      	ldrh	r2, [r1, #12]
 800727c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007280:	d032      	beq.n	80072e8 <__ssputs_r+0x80>
 8007282:	6825      	ldr	r5, [r4, #0]
 8007284:	6909      	ldr	r1, [r1, #16]
 8007286:	eba5 0901 	sub.w	r9, r5, r1
 800728a:	6965      	ldr	r5, [r4, #20]
 800728c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007294:	3301      	adds	r3, #1
 8007296:	444b      	add	r3, r9
 8007298:	106d      	asrs	r5, r5, #1
 800729a:	429d      	cmp	r5, r3
 800729c:	bf38      	it	cc
 800729e:	461d      	movcc	r5, r3
 80072a0:	0553      	lsls	r3, r2, #21
 80072a2:	d531      	bpl.n	8007308 <__ssputs_r+0xa0>
 80072a4:	4629      	mov	r1, r5
 80072a6:	f7ff ff2f 	bl	8007108 <_malloc_r>
 80072aa:	4606      	mov	r6, r0
 80072ac:	b950      	cbnz	r0, 80072c4 <__ssputs_r+0x5c>
 80072ae:	230c      	movs	r3, #12
 80072b0:	f8ca 3000 	str.w	r3, [sl]
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c4:	6921      	ldr	r1, [r4, #16]
 80072c6:	464a      	mov	r2, r9
 80072c8:	f000 fac0 	bl	800784c <memcpy>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	6126      	str	r6, [r4, #16]
 80072da:	6165      	str	r5, [r4, #20]
 80072dc:	444e      	add	r6, r9
 80072de:	eba5 0509 	sub.w	r5, r5, r9
 80072e2:	6026      	str	r6, [r4, #0]
 80072e4:	60a5      	str	r5, [r4, #8]
 80072e6:	463e      	mov	r6, r7
 80072e8:	42be      	cmp	r6, r7
 80072ea:	d900      	bls.n	80072ee <__ssputs_r+0x86>
 80072ec:	463e      	mov	r6, r7
 80072ee:	6820      	ldr	r0, [r4, #0]
 80072f0:	4632      	mov	r2, r6
 80072f2:	4641      	mov	r1, r8
 80072f4:	f000 fab8 	bl	8007868 <memmove>
 80072f8:	68a3      	ldr	r3, [r4, #8]
 80072fa:	1b9b      	subs	r3, r3, r6
 80072fc:	60a3      	str	r3, [r4, #8]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	4433      	add	r3, r6
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	2000      	movs	r0, #0
 8007306:	e7db      	b.n	80072c0 <__ssputs_r+0x58>
 8007308:	462a      	mov	r2, r5
 800730a:	f000 fac7 	bl	800789c <_realloc_r>
 800730e:	4606      	mov	r6, r0
 8007310:	2800      	cmp	r0, #0
 8007312:	d1e1      	bne.n	80072d8 <__ssputs_r+0x70>
 8007314:	6921      	ldr	r1, [r4, #16]
 8007316:	4650      	mov	r0, sl
 8007318:	f7ff fe8a 	bl	8007030 <_free_r>
 800731c:	e7c7      	b.n	80072ae <__ssputs_r+0x46>
	...

08007320 <_svfiprintf_r>:
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	4698      	mov	r8, r3
 8007326:	898b      	ldrh	r3, [r1, #12]
 8007328:	061b      	lsls	r3, r3, #24
 800732a:	b09d      	sub	sp, #116	; 0x74
 800732c:	4607      	mov	r7, r0
 800732e:	460d      	mov	r5, r1
 8007330:	4614      	mov	r4, r2
 8007332:	d50e      	bpl.n	8007352 <_svfiprintf_r+0x32>
 8007334:	690b      	ldr	r3, [r1, #16]
 8007336:	b963      	cbnz	r3, 8007352 <_svfiprintf_r+0x32>
 8007338:	2140      	movs	r1, #64	; 0x40
 800733a:	f7ff fee5 	bl	8007108 <_malloc_r>
 800733e:	6028      	str	r0, [r5, #0]
 8007340:	6128      	str	r0, [r5, #16]
 8007342:	b920      	cbnz	r0, 800734e <_svfiprintf_r+0x2e>
 8007344:	230c      	movs	r3, #12
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	f04f 30ff 	mov.w	r0, #4294967295
 800734c:	e0d1      	b.n	80074f2 <_svfiprintf_r+0x1d2>
 800734e:	2340      	movs	r3, #64	; 0x40
 8007350:	616b      	str	r3, [r5, #20]
 8007352:	2300      	movs	r3, #0
 8007354:	9309      	str	r3, [sp, #36]	; 0x24
 8007356:	2320      	movs	r3, #32
 8007358:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800735c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007360:	2330      	movs	r3, #48	; 0x30
 8007362:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800750c <_svfiprintf_r+0x1ec>
 8007366:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800736a:	f04f 0901 	mov.w	r9, #1
 800736e:	4623      	mov	r3, r4
 8007370:	469a      	mov	sl, r3
 8007372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007376:	b10a      	cbz	r2, 800737c <_svfiprintf_r+0x5c>
 8007378:	2a25      	cmp	r2, #37	; 0x25
 800737a:	d1f9      	bne.n	8007370 <_svfiprintf_r+0x50>
 800737c:	ebba 0b04 	subs.w	fp, sl, r4
 8007380:	d00b      	beq.n	800739a <_svfiprintf_r+0x7a>
 8007382:	465b      	mov	r3, fp
 8007384:	4622      	mov	r2, r4
 8007386:	4629      	mov	r1, r5
 8007388:	4638      	mov	r0, r7
 800738a:	f7ff ff6d 	bl	8007268 <__ssputs_r>
 800738e:	3001      	adds	r0, #1
 8007390:	f000 80aa 	beq.w	80074e8 <_svfiprintf_r+0x1c8>
 8007394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007396:	445a      	add	r2, fp
 8007398:	9209      	str	r2, [sp, #36]	; 0x24
 800739a:	f89a 3000 	ldrb.w	r3, [sl]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80a2 	beq.w	80074e8 <_svfiprintf_r+0x1c8>
 80073a4:	2300      	movs	r3, #0
 80073a6:	f04f 32ff 	mov.w	r2, #4294967295
 80073aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073ae:	f10a 0a01 	add.w	sl, sl, #1
 80073b2:	9304      	str	r3, [sp, #16]
 80073b4:	9307      	str	r3, [sp, #28]
 80073b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ba:	931a      	str	r3, [sp, #104]	; 0x68
 80073bc:	4654      	mov	r4, sl
 80073be:	2205      	movs	r2, #5
 80073c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c4:	4851      	ldr	r0, [pc, #324]	; (800750c <_svfiprintf_r+0x1ec>)
 80073c6:	f7f8 ff1b 	bl	8000200 <memchr>
 80073ca:	9a04      	ldr	r2, [sp, #16]
 80073cc:	b9d8      	cbnz	r0, 8007406 <_svfiprintf_r+0xe6>
 80073ce:	06d0      	lsls	r0, r2, #27
 80073d0:	bf44      	itt	mi
 80073d2:	2320      	movmi	r3, #32
 80073d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d8:	0711      	lsls	r1, r2, #28
 80073da:	bf44      	itt	mi
 80073dc:	232b      	movmi	r3, #43	; 0x2b
 80073de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073e2:	f89a 3000 	ldrb.w	r3, [sl]
 80073e6:	2b2a      	cmp	r3, #42	; 0x2a
 80073e8:	d015      	beq.n	8007416 <_svfiprintf_r+0xf6>
 80073ea:	9a07      	ldr	r2, [sp, #28]
 80073ec:	4654      	mov	r4, sl
 80073ee:	2000      	movs	r0, #0
 80073f0:	f04f 0c0a 	mov.w	ip, #10
 80073f4:	4621      	mov	r1, r4
 80073f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073fa:	3b30      	subs	r3, #48	; 0x30
 80073fc:	2b09      	cmp	r3, #9
 80073fe:	d94e      	bls.n	800749e <_svfiprintf_r+0x17e>
 8007400:	b1b0      	cbz	r0, 8007430 <_svfiprintf_r+0x110>
 8007402:	9207      	str	r2, [sp, #28]
 8007404:	e014      	b.n	8007430 <_svfiprintf_r+0x110>
 8007406:	eba0 0308 	sub.w	r3, r0, r8
 800740a:	fa09 f303 	lsl.w	r3, r9, r3
 800740e:	4313      	orrs	r3, r2
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	46a2      	mov	sl, r4
 8007414:	e7d2      	b.n	80073bc <_svfiprintf_r+0x9c>
 8007416:	9b03      	ldr	r3, [sp, #12]
 8007418:	1d19      	adds	r1, r3, #4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	9103      	str	r1, [sp, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	bfbb      	ittet	lt
 8007422:	425b      	neglt	r3, r3
 8007424:	f042 0202 	orrlt.w	r2, r2, #2
 8007428:	9307      	strge	r3, [sp, #28]
 800742a:	9307      	strlt	r3, [sp, #28]
 800742c:	bfb8      	it	lt
 800742e:	9204      	strlt	r2, [sp, #16]
 8007430:	7823      	ldrb	r3, [r4, #0]
 8007432:	2b2e      	cmp	r3, #46	; 0x2e
 8007434:	d10c      	bne.n	8007450 <_svfiprintf_r+0x130>
 8007436:	7863      	ldrb	r3, [r4, #1]
 8007438:	2b2a      	cmp	r3, #42	; 0x2a
 800743a:	d135      	bne.n	80074a8 <_svfiprintf_r+0x188>
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	1d1a      	adds	r2, r3, #4
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	9203      	str	r2, [sp, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	bfb8      	it	lt
 8007448:	f04f 33ff 	movlt.w	r3, #4294967295
 800744c:	3402      	adds	r4, #2
 800744e:	9305      	str	r3, [sp, #20]
 8007450:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800751c <_svfiprintf_r+0x1fc>
 8007454:	7821      	ldrb	r1, [r4, #0]
 8007456:	2203      	movs	r2, #3
 8007458:	4650      	mov	r0, sl
 800745a:	f7f8 fed1 	bl	8000200 <memchr>
 800745e:	b140      	cbz	r0, 8007472 <_svfiprintf_r+0x152>
 8007460:	2340      	movs	r3, #64	; 0x40
 8007462:	eba0 000a 	sub.w	r0, r0, sl
 8007466:	fa03 f000 	lsl.w	r0, r3, r0
 800746a:	9b04      	ldr	r3, [sp, #16]
 800746c:	4303      	orrs	r3, r0
 800746e:	3401      	adds	r4, #1
 8007470:	9304      	str	r3, [sp, #16]
 8007472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007476:	4826      	ldr	r0, [pc, #152]	; (8007510 <_svfiprintf_r+0x1f0>)
 8007478:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800747c:	2206      	movs	r2, #6
 800747e:	f7f8 febf 	bl	8000200 <memchr>
 8007482:	2800      	cmp	r0, #0
 8007484:	d038      	beq.n	80074f8 <_svfiprintf_r+0x1d8>
 8007486:	4b23      	ldr	r3, [pc, #140]	; (8007514 <_svfiprintf_r+0x1f4>)
 8007488:	bb1b      	cbnz	r3, 80074d2 <_svfiprintf_r+0x1b2>
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	3307      	adds	r3, #7
 800748e:	f023 0307 	bic.w	r3, r3, #7
 8007492:	3308      	adds	r3, #8
 8007494:	9303      	str	r3, [sp, #12]
 8007496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007498:	4433      	add	r3, r6
 800749a:	9309      	str	r3, [sp, #36]	; 0x24
 800749c:	e767      	b.n	800736e <_svfiprintf_r+0x4e>
 800749e:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a2:	460c      	mov	r4, r1
 80074a4:	2001      	movs	r0, #1
 80074a6:	e7a5      	b.n	80073f4 <_svfiprintf_r+0xd4>
 80074a8:	2300      	movs	r3, #0
 80074aa:	3401      	adds	r4, #1
 80074ac:	9305      	str	r3, [sp, #20]
 80074ae:	4619      	mov	r1, r3
 80074b0:	f04f 0c0a 	mov.w	ip, #10
 80074b4:	4620      	mov	r0, r4
 80074b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ba:	3a30      	subs	r2, #48	; 0x30
 80074bc:	2a09      	cmp	r2, #9
 80074be:	d903      	bls.n	80074c8 <_svfiprintf_r+0x1a8>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0c5      	beq.n	8007450 <_svfiprintf_r+0x130>
 80074c4:	9105      	str	r1, [sp, #20]
 80074c6:	e7c3      	b.n	8007450 <_svfiprintf_r+0x130>
 80074c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074cc:	4604      	mov	r4, r0
 80074ce:	2301      	movs	r3, #1
 80074d0:	e7f0      	b.n	80074b4 <_svfiprintf_r+0x194>
 80074d2:	ab03      	add	r3, sp, #12
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	462a      	mov	r2, r5
 80074d8:	4b0f      	ldr	r3, [pc, #60]	; (8007518 <_svfiprintf_r+0x1f8>)
 80074da:	a904      	add	r1, sp, #16
 80074dc:	4638      	mov	r0, r7
 80074de:	f3af 8000 	nop.w
 80074e2:	1c42      	adds	r2, r0, #1
 80074e4:	4606      	mov	r6, r0
 80074e6:	d1d6      	bne.n	8007496 <_svfiprintf_r+0x176>
 80074e8:	89ab      	ldrh	r3, [r5, #12]
 80074ea:	065b      	lsls	r3, r3, #25
 80074ec:	f53f af2c 	bmi.w	8007348 <_svfiprintf_r+0x28>
 80074f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074f2:	b01d      	add	sp, #116	; 0x74
 80074f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f8:	ab03      	add	r3, sp, #12
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	462a      	mov	r2, r5
 80074fe:	4b06      	ldr	r3, [pc, #24]	; (8007518 <_svfiprintf_r+0x1f8>)
 8007500:	a904      	add	r1, sp, #16
 8007502:	4638      	mov	r0, r7
 8007504:	f000 f87a 	bl	80075fc <_printf_i>
 8007508:	e7eb      	b.n	80074e2 <_svfiprintf_r+0x1c2>
 800750a:	bf00      	nop
 800750c:	08007e58 	.word	0x08007e58
 8007510:	08007e62 	.word	0x08007e62
 8007514:	00000000 	.word	0x00000000
 8007518:	08007269 	.word	0x08007269
 800751c:	08007e5e 	.word	0x08007e5e

08007520 <_printf_common>:
 8007520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007524:	4616      	mov	r6, r2
 8007526:	4699      	mov	r9, r3
 8007528:	688a      	ldr	r2, [r1, #8]
 800752a:	690b      	ldr	r3, [r1, #16]
 800752c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007530:	4293      	cmp	r3, r2
 8007532:	bfb8      	it	lt
 8007534:	4613      	movlt	r3, r2
 8007536:	6033      	str	r3, [r6, #0]
 8007538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800753c:	4607      	mov	r7, r0
 800753e:	460c      	mov	r4, r1
 8007540:	b10a      	cbz	r2, 8007546 <_printf_common+0x26>
 8007542:	3301      	adds	r3, #1
 8007544:	6033      	str	r3, [r6, #0]
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	0699      	lsls	r1, r3, #26
 800754a:	bf42      	ittt	mi
 800754c:	6833      	ldrmi	r3, [r6, #0]
 800754e:	3302      	addmi	r3, #2
 8007550:	6033      	strmi	r3, [r6, #0]
 8007552:	6825      	ldr	r5, [r4, #0]
 8007554:	f015 0506 	ands.w	r5, r5, #6
 8007558:	d106      	bne.n	8007568 <_printf_common+0x48>
 800755a:	f104 0a19 	add.w	sl, r4, #25
 800755e:	68e3      	ldr	r3, [r4, #12]
 8007560:	6832      	ldr	r2, [r6, #0]
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	42ab      	cmp	r3, r5
 8007566:	dc26      	bgt.n	80075b6 <_printf_common+0x96>
 8007568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800756c:	1e13      	subs	r3, r2, #0
 800756e:	6822      	ldr	r2, [r4, #0]
 8007570:	bf18      	it	ne
 8007572:	2301      	movne	r3, #1
 8007574:	0692      	lsls	r2, r2, #26
 8007576:	d42b      	bmi.n	80075d0 <_printf_common+0xb0>
 8007578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800757c:	4649      	mov	r1, r9
 800757e:	4638      	mov	r0, r7
 8007580:	47c0      	blx	r8
 8007582:	3001      	adds	r0, #1
 8007584:	d01e      	beq.n	80075c4 <_printf_common+0xa4>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	68e5      	ldr	r5, [r4, #12]
 800758a:	6832      	ldr	r2, [r6, #0]
 800758c:	f003 0306 	and.w	r3, r3, #6
 8007590:	2b04      	cmp	r3, #4
 8007592:	bf08      	it	eq
 8007594:	1aad      	subeq	r5, r5, r2
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	6922      	ldr	r2, [r4, #16]
 800759a:	bf0c      	ite	eq
 800759c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075a0:	2500      	movne	r5, #0
 80075a2:	4293      	cmp	r3, r2
 80075a4:	bfc4      	itt	gt
 80075a6:	1a9b      	subgt	r3, r3, r2
 80075a8:	18ed      	addgt	r5, r5, r3
 80075aa:	2600      	movs	r6, #0
 80075ac:	341a      	adds	r4, #26
 80075ae:	42b5      	cmp	r5, r6
 80075b0:	d11a      	bne.n	80075e8 <_printf_common+0xc8>
 80075b2:	2000      	movs	r0, #0
 80075b4:	e008      	b.n	80075c8 <_printf_common+0xa8>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4652      	mov	r2, sl
 80075ba:	4649      	mov	r1, r9
 80075bc:	4638      	mov	r0, r7
 80075be:	47c0      	blx	r8
 80075c0:	3001      	adds	r0, #1
 80075c2:	d103      	bne.n	80075cc <_printf_common+0xac>
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075cc:	3501      	adds	r5, #1
 80075ce:	e7c6      	b.n	800755e <_printf_common+0x3e>
 80075d0:	18e1      	adds	r1, r4, r3
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	2030      	movs	r0, #48	; 0x30
 80075d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075da:	4422      	add	r2, r4
 80075dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075e4:	3302      	adds	r3, #2
 80075e6:	e7c7      	b.n	8007578 <_printf_common+0x58>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4622      	mov	r2, r4
 80075ec:	4649      	mov	r1, r9
 80075ee:	4638      	mov	r0, r7
 80075f0:	47c0      	blx	r8
 80075f2:	3001      	adds	r0, #1
 80075f4:	d0e6      	beq.n	80075c4 <_printf_common+0xa4>
 80075f6:	3601      	adds	r6, #1
 80075f8:	e7d9      	b.n	80075ae <_printf_common+0x8e>
	...

080075fc <_printf_i>:
 80075fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	7e0f      	ldrb	r7, [r1, #24]
 8007602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007604:	2f78      	cmp	r7, #120	; 0x78
 8007606:	4691      	mov	r9, r2
 8007608:	4680      	mov	r8, r0
 800760a:	460c      	mov	r4, r1
 800760c:	469a      	mov	sl, r3
 800760e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007612:	d807      	bhi.n	8007624 <_printf_i+0x28>
 8007614:	2f62      	cmp	r7, #98	; 0x62
 8007616:	d80a      	bhi.n	800762e <_printf_i+0x32>
 8007618:	2f00      	cmp	r7, #0
 800761a:	f000 80d8 	beq.w	80077ce <_printf_i+0x1d2>
 800761e:	2f58      	cmp	r7, #88	; 0x58
 8007620:	f000 80a3 	beq.w	800776a <_printf_i+0x16e>
 8007624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800762c:	e03a      	b.n	80076a4 <_printf_i+0xa8>
 800762e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007632:	2b15      	cmp	r3, #21
 8007634:	d8f6      	bhi.n	8007624 <_printf_i+0x28>
 8007636:	a101      	add	r1, pc, #4	; (adr r1, 800763c <_printf_i+0x40>)
 8007638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800763c:	08007695 	.word	0x08007695
 8007640:	080076a9 	.word	0x080076a9
 8007644:	08007625 	.word	0x08007625
 8007648:	08007625 	.word	0x08007625
 800764c:	08007625 	.word	0x08007625
 8007650:	08007625 	.word	0x08007625
 8007654:	080076a9 	.word	0x080076a9
 8007658:	08007625 	.word	0x08007625
 800765c:	08007625 	.word	0x08007625
 8007660:	08007625 	.word	0x08007625
 8007664:	08007625 	.word	0x08007625
 8007668:	080077b5 	.word	0x080077b5
 800766c:	080076d9 	.word	0x080076d9
 8007670:	08007797 	.word	0x08007797
 8007674:	08007625 	.word	0x08007625
 8007678:	08007625 	.word	0x08007625
 800767c:	080077d7 	.word	0x080077d7
 8007680:	08007625 	.word	0x08007625
 8007684:	080076d9 	.word	0x080076d9
 8007688:	08007625 	.word	0x08007625
 800768c:	08007625 	.word	0x08007625
 8007690:	0800779f 	.word	0x0800779f
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	602a      	str	r2, [r5, #0]
 800769c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076a4:	2301      	movs	r3, #1
 80076a6:	e0a3      	b.n	80077f0 <_printf_i+0x1f4>
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	6829      	ldr	r1, [r5, #0]
 80076ac:	0606      	lsls	r6, r0, #24
 80076ae:	f101 0304 	add.w	r3, r1, #4
 80076b2:	d50a      	bpl.n	80076ca <_printf_i+0xce>
 80076b4:	680e      	ldr	r6, [r1, #0]
 80076b6:	602b      	str	r3, [r5, #0]
 80076b8:	2e00      	cmp	r6, #0
 80076ba:	da03      	bge.n	80076c4 <_printf_i+0xc8>
 80076bc:	232d      	movs	r3, #45	; 0x2d
 80076be:	4276      	negs	r6, r6
 80076c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c4:	485e      	ldr	r0, [pc, #376]	; (8007840 <_printf_i+0x244>)
 80076c6:	230a      	movs	r3, #10
 80076c8:	e019      	b.n	80076fe <_printf_i+0x102>
 80076ca:	680e      	ldr	r6, [r1, #0]
 80076cc:	602b      	str	r3, [r5, #0]
 80076ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076d2:	bf18      	it	ne
 80076d4:	b236      	sxthne	r6, r6
 80076d6:	e7ef      	b.n	80076b8 <_printf_i+0xbc>
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	6820      	ldr	r0, [r4, #0]
 80076dc:	1d19      	adds	r1, r3, #4
 80076de:	6029      	str	r1, [r5, #0]
 80076e0:	0601      	lsls	r1, r0, #24
 80076e2:	d501      	bpl.n	80076e8 <_printf_i+0xec>
 80076e4:	681e      	ldr	r6, [r3, #0]
 80076e6:	e002      	b.n	80076ee <_printf_i+0xf2>
 80076e8:	0646      	lsls	r6, r0, #25
 80076ea:	d5fb      	bpl.n	80076e4 <_printf_i+0xe8>
 80076ec:	881e      	ldrh	r6, [r3, #0]
 80076ee:	4854      	ldr	r0, [pc, #336]	; (8007840 <_printf_i+0x244>)
 80076f0:	2f6f      	cmp	r7, #111	; 0x6f
 80076f2:	bf0c      	ite	eq
 80076f4:	2308      	moveq	r3, #8
 80076f6:	230a      	movne	r3, #10
 80076f8:	2100      	movs	r1, #0
 80076fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076fe:	6865      	ldr	r5, [r4, #4]
 8007700:	60a5      	str	r5, [r4, #8]
 8007702:	2d00      	cmp	r5, #0
 8007704:	bfa2      	ittt	ge
 8007706:	6821      	ldrge	r1, [r4, #0]
 8007708:	f021 0104 	bicge.w	r1, r1, #4
 800770c:	6021      	strge	r1, [r4, #0]
 800770e:	b90e      	cbnz	r6, 8007714 <_printf_i+0x118>
 8007710:	2d00      	cmp	r5, #0
 8007712:	d04d      	beq.n	80077b0 <_printf_i+0x1b4>
 8007714:	4615      	mov	r5, r2
 8007716:	fbb6 f1f3 	udiv	r1, r6, r3
 800771a:	fb03 6711 	mls	r7, r3, r1, r6
 800771e:	5dc7      	ldrb	r7, [r0, r7]
 8007720:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007724:	4637      	mov	r7, r6
 8007726:	42bb      	cmp	r3, r7
 8007728:	460e      	mov	r6, r1
 800772a:	d9f4      	bls.n	8007716 <_printf_i+0x11a>
 800772c:	2b08      	cmp	r3, #8
 800772e:	d10b      	bne.n	8007748 <_printf_i+0x14c>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	07de      	lsls	r6, r3, #31
 8007734:	d508      	bpl.n	8007748 <_printf_i+0x14c>
 8007736:	6923      	ldr	r3, [r4, #16]
 8007738:	6861      	ldr	r1, [r4, #4]
 800773a:	4299      	cmp	r1, r3
 800773c:	bfde      	ittt	le
 800773e:	2330      	movle	r3, #48	; 0x30
 8007740:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007744:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007748:	1b52      	subs	r2, r2, r5
 800774a:	6122      	str	r2, [r4, #16]
 800774c:	f8cd a000 	str.w	sl, [sp]
 8007750:	464b      	mov	r3, r9
 8007752:	aa03      	add	r2, sp, #12
 8007754:	4621      	mov	r1, r4
 8007756:	4640      	mov	r0, r8
 8007758:	f7ff fee2 	bl	8007520 <_printf_common>
 800775c:	3001      	adds	r0, #1
 800775e:	d14c      	bne.n	80077fa <_printf_i+0x1fe>
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	b004      	add	sp, #16
 8007766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776a:	4835      	ldr	r0, [pc, #212]	; (8007840 <_printf_i+0x244>)
 800776c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007770:	6829      	ldr	r1, [r5, #0]
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f851 6b04 	ldr.w	r6, [r1], #4
 8007778:	6029      	str	r1, [r5, #0]
 800777a:	061d      	lsls	r5, r3, #24
 800777c:	d514      	bpl.n	80077a8 <_printf_i+0x1ac>
 800777e:	07df      	lsls	r7, r3, #31
 8007780:	bf44      	itt	mi
 8007782:	f043 0320 	orrmi.w	r3, r3, #32
 8007786:	6023      	strmi	r3, [r4, #0]
 8007788:	b91e      	cbnz	r6, 8007792 <_printf_i+0x196>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	f023 0320 	bic.w	r3, r3, #32
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	2310      	movs	r3, #16
 8007794:	e7b0      	b.n	80076f8 <_printf_i+0xfc>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	f043 0320 	orr.w	r3, r3, #32
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	2378      	movs	r3, #120	; 0x78
 80077a0:	4828      	ldr	r0, [pc, #160]	; (8007844 <_printf_i+0x248>)
 80077a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077a6:	e7e3      	b.n	8007770 <_printf_i+0x174>
 80077a8:	0659      	lsls	r1, r3, #25
 80077aa:	bf48      	it	mi
 80077ac:	b2b6      	uxthmi	r6, r6
 80077ae:	e7e6      	b.n	800777e <_printf_i+0x182>
 80077b0:	4615      	mov	r5, r2
 80077b2:	e7bb      	b.n	800772c <_printf_i+0x130>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	6826      	ldr	r6, [r4, #0]
 80077b8:	6961      	ldr	r1, [r4, #20]
 80077ba:	1d18      	adds	r0, r3, #4
 80077bc:	6028      	str	r0, [r5, #0]
 80077be:	0635      	lsls	r5, r6, #24
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0x1cc>
 80077c4:	6019      	str	r1, [r3, #0]
 80077c6:	e002      	b.n	80077ce <_printf_i+0x1d2>
 80077c8:	0670      	lsls	r0, r6, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0x1c8>
 80077cc:	8019      	strh	r1, [r3, #0]
 80077ce:	2300      	movs	r3, #0
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	4615      	mov	r5, r2
 80077d4:	e7ba      	b.n	800774c <_printf_i+0x150>
 80077d6:	682b      	ldr	r3, [r5, #0]
 80077d8:	1d1a      	adds	r2, r3, #4
 80077da:	602a      	str	r2, [r5, #0]
 80077dc:	681d      	ldr	r5, [r3, #0]
 80077de:	6862      	ldr	r2, [r4, #4]
 80077e0:	2100      	movs	r1, #0
 80077e2:	4628      	mov	r0, r5
 80077e4:	f7f8 fd0c 	bl	8000200 <memchr>
 80077e8:	b108      	cbz	r0, 80077ee <_printf_i+0x1f2>
 80077ea:	1b40      	subs	r0, r0, r5
 80077ec:	6060      	str	r0, [r4, #4]
 80077ee:	6863      	ldr	r3, [r4, #4]
 80077f0:	6123      	str	r3, [r4, #16]
 80077f2:	2300      	movs	r3, #0
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f8:	e7a8      	b.n	800774c <_printf_i+0x150>
 80077fa:	6923      	ldr	r3, [r4, #16]
 80077fc:	462a      	mov	r2, r5
 80077fe:	4649      	mov	r1, r9
 8007800:	4640      	mov	r0, r8
 8007802:	47d0      	blx	sl
 8007804:	3001      	adds	r0, #1
 8007806:	d0ab      	beq.n	8007760 <_printf_i+0x164>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	079b      	lsls	r3, r3, #30
 800780c:	d413      	bmi.n	8007836 <_printf_i+0x23a>
 800780e:	68e0      	ldr	r0, [r4, #12]
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	4298      	cmp	r0, r3
 8007814:	bfb8      	it	lt
 8007816:	4618      	movlt	r0, r3
 8007818:	e7a4      	b.n	8007764 <_printf_i+0x168>
 800781a:	2301      	movs	r3, #1
 800781c:	4632      	mov	r2, r6
 800781e:	4649      	mov	r1, r9
 8007820:	4640      	mov	r0, r8
 8007822:	47d0      	blx	sl
 8007824:	3001      	adds	r0, #1
 8007826:	d09b      	beq.n	8007760 <_printf_i+0x164>
 8007828:	3501      	adds	r5, #1
 800782a:	68e3      	ldr	r3, [r4, #12]
 800782c:	9903      	ldr	r1, [sp, #12]
 800782e:	1a5b      	subs	r3, r3, r1
 8007830:	42ab      	cmp	r3, r5
 8007832:	dcf2      	bgt.n	800781a <_printf_i+0x21e>
 8007834:	e7eb      	b.n	800780e <_printf_i+0x212>
 8007836:	2500      	movs	r5, #0
 8007838:	f104 0619 	add.w	r6, r4, #25
 800783c:	e7f5      	b.n	800782a <_printf_i+0x22e>
 800783e:	bf00      	nop
 8007840:	08007e69 	.word	0x08007e69
 8007844:	08007e7a 	.word	0x08007e7a

08007848 <__retarget_lock_acquire_recursive>:
 8007848:	4770      	bx	lr

0800784a <__retarget_lock_release_recursive>:
 800784a:	4770      	bx	lr

0800784c <memcpy>:
 800784c:	440a      	add	r2, r1
 800784e:	4291      	cmp	r1, r2
 8007850:	f100 33ff 	add.w	r3, r0, #4294967295
 8007854:	d100      	bne.n	8007858 <memcpy+0xc>
 8007856:	4770      	bx	lr
 8007858:	b510      	push	{r4, lr}
 800785a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800785e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007862:	4291      	cmp	r1, r2
 8007864:	d1f9      	bne.n	800785a <memcpy+0xe>
 8007866:	bd10      	pop	{r4, pc}

08007868 <memmove>:
 8007868:	4288      	cmp	r0, r1
 800786a:	b510      	push	{r4, lr}
 800786c:	eb01 0402 	add.w	r4, r1, r2
 8007870:	d902      	bls.n	8007878 <memmove+0x10>
 8007872:	4284      	cmp	r4, r0
 8007874:	4623      	mov	r3, r4
 8007876:	d807      	bhi.n	8007888 <memmove+0x20>
 8007878:	1e43      	subs	r3, r0, #1
 800787a:	42a1      	cmp	r1, r4
 800787c:	d008      	beq.n	8007890 <memmove+0x28>
 800787e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007886:	e7f8      	b.n	800787a <memmove+0x12>
 8007888:	4402      	add	r2, r0
 800788a:	4601      	mov	r1, r0
 800788c:	428a      	cmp	r2, r1
 800788e:	d100      	bne.n	8007892 <memmove+0x2a>
 8007890:	bd10      	pop	{r4, pc}
 8007892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800789a:	e7f7      	b.n	800788c <memmove+0x24>

0800789c <_realloc_r>:
 800789c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a0:	4680      	mov	r8, r0
 80078a2:	4614      	mov	r4, r2
 80078a4:	460e      	mov	r6, r1
 80078a6:	b921      	cbnz	r1, 80078b2 <_realloc_r+0x16>
 80078a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ac:	4611      	mov	r1, r2
 80078ae:	f7ff bc2b 	b.w	8007108 <_malloc_r>
 80078b2:	b92a      	cbnz	r2, 80078c0 <_realloc_r+0x24>
 80078b4:	f7ff fbbc 	bl	8007030 <_free_r>
 80078b8:	4625      	mov	r5, r4
 80078ba:	4628      	mov	r0, r5
 80078bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c0:	f000 f81b 	bl	80078fa <_malloc_usable_size_r>
 80078c4:	4284      	cmp	r4, r0
 80078c6:	4607      	mov	r7, r0
 80078c8:	d802      	bhi.n	80078d0 <_realloc_r+0x34>
 80078ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078ce:	d812      	bhi.n	80078f6 <_realloc_r+0x5a>
 80078d0:	4621      	mov	r1, r4
 80078d2:	4640      	mov	r0, r8
 80078d4:	f7ff fc18 	bl	8007108 <_malloc_r>
 80078d8:	4605      	mov	r5, r0
 80078da:	2800      	cmp	r0, #0
 80078dc:	d0ed      	beq.n	80078ba <_realloc_r+0x1e>
 80078de:	42bc      	cmp	r4, r7
 80078e0:	4622      	mov	r2, r4
 80078e2:	4631      	mov	r1, r6
 80078e4:	bf28      	it	cs
 80078e6:	463a      	movcs	r2, r7
 80078e8:	f7ff ffb0 	bl	800784c <memcpy>
 80078ec:	4631      	mov	r1, r6
 80078ee:	4640      	mov	r0, r8
 80078f0:	f7ff fb9e 	bl	8007030 <_free_r>
 80078f4:	e7e1      	b.n	80078ba <_realloc_r+0x1e>
 80078f6:	4635      	mov	r5, r6
 80078f8:	e7df      	b.n	80078ba <_realloc_r+0x1e>

080078fa <_malloc_usable_size_r>:
 80078fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078fe:	1f18      	subs	r0, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	bfbc      	itt	lt
 8007904:	580b      	ldrlt	r3, [r1, r0]
 8007906:	18c0      	addlt	r0, r0, r3
 8007908:	4770      	bx	lr
	...

0800790c <_init>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr

08007918 <_fini>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr
